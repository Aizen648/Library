{
  "openapi": "3.0.0",
  "info": {
    "title": "Redlink API",
    "contact": {
      "email": "support@redlink.pl"
    },
    "version": "v2.1.1.0",
    "description": "# Introduction\n\nWe are pleased to present you our new REST API. At the begining of this documentation we would like to give you some general informations about this API:\n\n1. It's based on [JSONAPI](https://jsonapi.org/) specification. We hope that following the rules of this specification will make our API easy to understand.\n2. This documentation is generated from swagger file - written in [OpenAPI 3.0.2 Specification](https://swagger.io/specification/)\n3. This API always accept application/json format at the API input and always return the same format as output.\n4. API output always follows this scheme:\n```text\n{\n    \"meta\": {\n        \"numberOfErrors\": NUMBER_OF_ELEMENTS_IN_ERRORS (number),\n        \"numberOfData\": NUMBER_OF_ELEMENTS_IN_DATA (number),\n        \"status\": HTTP_STATUS (number),\n        \"uniqId\": UNIQUE_REQUEST_ID (string)\n    },\n    \"data\": [],\n    \"errors\": [\n        {\n            \"title\": ERROR_TITLE (string),\n            \"message\": ERROR_MESSAGE (string),\n            \"code\": ERROR_CODE (string),\n            \"meta\":{\n                \"parameter\": SOME_VALUE (string),\n                \"value\": SOME_VALUE (string),\n                \"source\": SOME_VALUE (string),\n                \"somefield\": SOME_VALUE (string)\n            }\n        }\n    ]\n}\n```\n\nFollowing rules applies to the above scheme:\n* `meta` element is always present\n* `meta.numberOfErrors` indicates how many elements `errors` array includes\n* `meta.numberOfData` indicates how many elements `data` array includes\n* `meta.status` indicates response HTTP status\n* `meta.uniqId` is used to identify request, if your will have some troubles with your request, please make sure that you sent us `meta.uniqId` value\n* `meta` may contain additional fields\n* `data` array cannot be present with `errors` array if status code is different than HTTP 207 (MULTI-STATUS)\n* `errors` array always consists object with fields: `title`, `message` and `code`.\n* `meta` element may be present inside single error object and contain additional information (that can be parsed) about error\n* `parameter` the parameter that causes the error\n* `value` the value of this parameter passed\n* `source` a link to the entity that caused the error, e.g. externalId\n* `somefield` additional fields that may appear\n\n# Authentication\n\nSecond version of VercomAPI offers authentication with pair of keys: Application-Key and Authorization. You can generate your keys in your account panel. To authenticate simply add to your request header with name `Authorization` and your authorization key as value (string of 128 characters length) and header with name `Application-Key` and your app key as value.\n\nExample:\n\n```bash\n$ curl --request POST \\\n  --header 'Content-Type: application/json' \\\n  --header 'Application-Key: ' \\\n  --header 'Authorization: ' \\\n  --url '...'\n  --data '{ ... }'  \n```\n\n# REST clients samples\n\nTo make integration with our API clear, we have provided examples for some well known REST clients. Feel free to play with these samples.\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](/postman-collection.json)\n\n[![Run in Insomnia}](https://insomnia.rest/images/run.svg)](/insomnia.json)\n\n# Long running actions - Retry-After header explained\n\nThis API provide some actions that should be used in different way. When we have to deal with long running tasks we don't want to make client wait. To resolve this case we provided support for `Retry-After` header. How it works? Pretty simple:\n\n1. Client executes long running action (ex. POST /long-running)\n2. If response data is available then response with HTTP status 200 and data array is returned\n3. If request is not yet available API returns following response:\n\n```text\nHTTP/1.1 202 ACCEPTED\n\nContent-Type: application/json\nRetry-After: <delay-seconds>\nExpires: <http-date>\n\n...\n```\nAnd here we have to explain the meaning of above response headers:\n\n* `HTTP/1.1 202 ACCEPTED` indicates that response is not yet available\n* `Retry-After` indicates how long client should wait before making next request to this endpoint\n* `Expires` contains the date/time after which the response is considered stale (client should NOT make another request to this endpoint after time specified at this header)\n\nThat all. Pretty simple. Isn't it?\n\n# Input compression\n\nThis API supports following compression algorithms: gzip.\nTo enable this feature just add following header to your request:\n\n```text\nContent-Encoding: gzip \n```\n\nNote that API always returns `application/json` response body.\n\nIn case of sending not compressed data with `Content-Encoding: gzip` header error will be returned.\n\n# Using filters\n\nThis API supports filters for `GET` methods. Almost all of these methods support two filters: `limit` and `offset`. They are used for pagination.\n\n* `limit` is used to limit number of elements that should API return\n* `offset` is used to ommit number of elements from begining\n\nIn some `GET` methods you can also use additional filters:\n\n* `getFullDate` is used to get pretty printed DateTime instead Timestamp, accept int values, 0 means get timestamp, 1 means get formated DateTime\n\n# SMS Billing\n\nSms billing table. GSM-7 characters are standard characters used in SMS messages. The use of other characters significantly shortens the length of individual messages. The tables below illustrate this rule.\n\n| Only GSM7 characters   | SMS count |\n|------------------------|-----------|\n| 1 - 160 characters     |     1     |\n| 161 - 306 characters   |     2     |\n| 307 - 459 characters   |     3     |\n| 460 - 612 characters   |     4     |\n| 613 - 765 characters   |     5     |\n| 766 - 918 characters   |     6     |\n| 919 - 1071 characters  |     7     |\n| 1072 - 1224 characters |     8     |\n| 1225 - 1377 characters |     9     |\n\n\n| Characters not included in the GSM7 table | SMS count |\n|-------------------------------------------|-----------|\n| 1 - 70 characters                         |     1     |\n| 71 - 134 characters                       |     2     |\n| 135 - 201 characters                      |     3     |\n| 202 - 268 characters                      |     4     |\n| 269 - 335 characters                      |     5     |\n| 336 - 402 characters                      |     6     |\n| 403 - 469 characters                      |     7     |\n| 470 - 536 characters                      |     8     |\n| 537 - 603 characters                      |     9     |\n\n# Incoming webhooks\nListen for events on your account so your integration can automatically trigger reactions.\n\nIt is possible to receive delivery and/or click and/or open statuses of all your sendouts from different channels of communication via webhook. A webhook enables us to push real-time notifications to your app. We use HTTPS to send these notifications to your app as a JSON payload. You can then use these notifications to execute actions in your backend systems. Webhooks are particularly useful for sendouts in which you wish to act on the event or display information about delivery in your systems as soon as possible. Alternatively when you need very detailed status information for each message for a large dataset that cannot be found in our panel (for example due to TTL).\n\n## Steps to configure webhooks\n1. Identify the events you want to monitor and the event payloads to parse (payloads are described below).\n2. Create a webhook endpoint as an HTTPS endpoint (URL) on your server.\n3. Handle requests by saving each event object (parse it later) and returning 200 response status codes with a string message 'ok'.\n4. Test that your webhook endpoint is working properly using settings in our panel\n5. Save your webhook configuration in panel\n\n## Step 1: Identify the events to monitor\nThe events you can monitor are dependent on your plan and features that you use. The full list is available in the configuration page in our panel under *Account -> Settings -> Webhooks*.\n\n## Step 2: Create a webhook endpoint\nGenerally you can specify two URLs for each webhook type. Default URL and secondary URL. Unless specified otherwise (in send request), the webhook will be sent to the main URL and when it’s unavailable or fails to respond properly, to the secondary URL.\n\n## Step 3: Handle requests\nThe data is provided in a POST request that consists of an array of events. Each event is structured as an event object but its structure varies in accordance to the type of the event (see below for detailed descriptions for each type). Your endpoint should:\ncheck the authorization (in accordance to the setting in panel),\nsave the payload,\nrespond with `Status: 200` and `Message: ok`. The ‘ok’ is a lowercase string.\nYour server should NOT validate the payload before giving the response. The only reasons to respond with something other than success should be authorization failure or an actual internal server error. You should parser your stored payload data into intended structures in a different process (than the receiving endpoint).\n\nOur request can look like this:\n```\n[{\"externalId\":\"xxxxxxxxxxxxxxxxxxxxxxxx\",\"phoneNumber\":\"+48XXXXXXXXX\",\"status\":1,\"statusDesc\":\"DELIVERED\",\"statusTime\":\"2021-04-27T00:00:18\",\"webhookUrl\":\"xxxxxxxxxxxxxxx\"}]\n```\nor like this:\n```\n[{\"externalId\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\"appId\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\"platform\": 1,\"status\": 1,\"statusDesc\": \"Accepted by push operator\",\"statusDetails\": \"NOTIFICATION_CLICK_ACTION\",\"statusTime\": \"2020-12-08T11:57:08\",\"actionId\": null,\"code\":null}]\n```\nThe specific fields depend on the type of webhook (see below).\n\n### Authorization\n\nMake sure that the webhooks actually come from us and stay secure.\nIn the panel you can see 2 options for authentication:\n- None\n- Basic auth.\n\nWhether you choose to additionally use basic auth or not, you should always check the hash of incoming webhook. With our POST request, in addition to the standard HTTP headers, we send three headers will allow you to verify if the data actually come from us:\n\n| Header             | Type   | Description                       |\n|--------------------|--------|-----------------------------------|\n| X-Webhook-Date     | string | Date on which the webhook is sent |\n| X-Webhook-Checksum | string | Checksum                          | \n| Request-Id         | string | Unique request ID                 |\n\nNow, the checksum is generated from a string built like this:\n```\nsecretkey|X-Webhook-Date|Request-Id\n```\n\n| Value          | Description                                                            |\n|----------------|------------------------------------------------------------------------|\n| secretkey      | is a key given to you when you configure your webhook inside the panel |\n| X-Webhook-Date | from headers                                                            |\n| Request-Id     | from headers                                                            |\n\n\nAdditionally, you can protect your script with basic auth. All you need to do is turn the option on and set login and password in the panel. Then, of course, add authentication to your endpoint.\n\n### Webhook types and event object structures\n#### Transactional e-mails\n\nRemember to use unique message_ids so that you can later aggregate all the webhooks (with consecutive statuses).\n\nexample:\n```\n[\n{\n      \"subject\": \"Your chosen subject\",\n      \"smtpAccount\": \"1.accountname.smtp\",\n      \"to\": {\n        \"email\": \"test@test.com\",\n        \"name\": \"Jane Doe\",\n        \"messageId\": \"d18aa9aa-109e-1b16-a52d-205eac42e44a@domain.com\"\n      },\n      \"from\": {\n        \"email\": \"test@domain.com\",\n        \"name\": \"Test Corp.\"\n      },\n      \"tags\": null,\n      \"status\": \"dropped\",\n      \"statusTime\": 1580996271,\n      \"statusDesc\": \"test@test.com in blacklist\",\n      \"allStatuses\": [\n        {\n          \"status\": \"injected\",\n          \"statusTime\": 1580996275,\n          \"statusDesc\": \"injected\"\n        },\n        {\n          \"status\": \"dropped\",\n          \"statusTime\": 1580996271,\n          \"statusDesc\": \"test@test.com in blacklist\"\n        }\n      ]\n    }\n]\n```\n#### Transactional SMS - delivery reports\n| Field        | Type   | Example                    |\n|--------------|--------|----------------------------|\n| externalId   | string | test123                    |\n| status       | int    | 1                          |\n| statusDesc   | string | DELIVERED                  |\n| statusTime   | string | 2021-12-12T12:12:12        |\n| webhookUrl*  | string | https://test.pl/test.aspx  |\n\n*This object contains a `webhookUrl` field because, when sending transactional SMS it is possible to specify a webhook URL inside send request directly. In that case, both default URL and secondary URL configured in the panel will be ignored and the webhook will be sent to this, additionally specified, URL.\n\nexample:\n```\n[{\"externalId\":\"xxxxxxxxxxxxxxxxxxxxxxxx\",\"phoneNumber\":\"+48XXXXXXXXX\",\"status\":1,\"statusDesc\":\"DELIVERED\",\"statusTime\":\"2021-04-27T00:00:18\",\"webhookUrl\":\"xxxxxxxxxxxxxxx\"}]\n```\n\n#### Transactional SMS - clicked link\n\n| Field        | Type   | Example                                                                                                          |\n|--------------|--------|------------------------------------------------------------------------------------------------------------------|\n| externalId   | string | test123                                                                                                          |    | phoneNumber  | string | +48111222333                                                                                                     |\n| url          | string | http://www.test.pl/kontact/?place=menu                                                                           |\n| clickTime    | string | 2021-12-12T12:12:12                                                                                              |\n| ip           | string | 111.222.11.22                                                                                                    |\n| userAgent    | string | Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/xxx.xx (KHTML, like Gecko) Chrome/xxx.xx.xxx.xx Safari/xxx.xx Google |\n| webhookUrl*  | string | https://test.pl/test.aspx                                                                                        |\n\n*This object contains a `webhookUrl` field because, when sending transactional SMS it is possible to specify a webhook URL inside send request directly. In that case, both default URL and secondary URL configured in the panel will be ignored and the webhook will be sent to this, additionally specified, URL.\n\n#### 2-way communication - Incoming SMS\n\n| Field       | Type   | Example                              |\n|-------------|--------|--------------------------------------|\n| id          | string | F2D21CA2-916E-4B92-B686-606231D9165F |\n| phoneNumber | string | +48111222333                         |\n| message     | string | Thank You                            |\n| ndi         | string | 48111222333                          |\n| statusTime  | string | 2021-11-15T12:25:32                  |\n\n#### Push messages - delivery reports\n\n| Field         | Type   | Example                              |\n|---------------|--------|--------------------------------------|\n| externalId    | string | xxxxxxxxxxxxxxxxxxxxxxxx             |\n| appId         | string | xxxxxxxxxxxx                         |\n| platform      | int    | 1                                    |\n| status        | int    | 1                                    |\n| statusDesc    | string | Accepted by push operator            |\n| statusDetails | string | NOTIFICATION_CLICK_ACTION            |\n| actionId      | int    | 1                                    |\n| code          | string | null                                 |\n| statusTime    | string | 2021-11-15T12:25:32                  |\n\nValues for field `platform`:\n\n|   |         |\n|---|---------|\n| 1 | IOS     |\n| 2 | ANDROID |\n\nValues for field `status`:\n\n|   |            |\n|---|------------|\n| 1 | DISCARDED  |\n| 2 | SCHEDULED  |\n| 3 | SENT       |\n| 4 | FAILED     |\n| 5 | RECEIVED   |\n| 6 | REACTED_ON |\n\nValues for field `statusDesc`:\n\n|            |                                     |\n|------------|-------------------------------------|\n| DISCARDED  | \"Push validation failed\"            |\n| SCHEDULED  | \"Push accepted by push operator\"    |\n| SENT       | \"Push accepted by FCM/APNS servers\" |\n| FAILED     | \"Push dropped by FCM/APNS\"          |\n| RECEIVED   | \"Push received by device\"           |\n| REACTED_ON | \"User reacted on push\"              |\n\nValues for field `statusDetails`:\n\n|                           |\n|---------------------------|\n| NOTIFICATION_CLICK_ACTION |\n| NOTIFICATION_SWIPE_ACTION |\n| DIALOG_DISSMISS_ACTION    |\n\nexample:\n```\n[{\"externalId\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\"appId\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\"platform\": 1,\"status\": 1,\"statusDesc\": \"Accepted by push operator\",\"statusDetails\": \"NOTIFICATION_CLICK_ACTION\",\"statusTime\": \"2020-12-08T11:57:08\",\"actionId\": null,\"code\":null}]\n```\n\n## Step 4: Test that your webhook\nOnly after a successful test result can your webhook configuration be saved. Make sure your endpoint returns `Status: 200` and `Message: ok`.\n\n## Step 5: Save your webhook configuration\n*Voilà!* You have configured your webhook integration.\n\n# External resources\n\n[Converting OAS specification file RAML, API Blueprint...](https://github.com/LucyBot-Inc/api-spec-converter)\n\n[Generating clients from OAS file](https://swagger.io/tools/swagger-codegen/)\n\n[Other tool for client generation](https://openapi-generator.tech/)\n\n# Current Version\n\nThis API is using semantic versioning. Current API version is 2.0.0.\n\nLooking for older one?\n\n [Click here for v1](/docs/v1/)  [Click here for v2](/docs/v2/)  [Click here for v2.1](/docs/v2.1/)  [Click here for fm_v2.1](/docs/fm_v2.1/)  \n\n# License\n\nVercom &copy; 2021"
  },
  "servers": [
    {
      "url": "https://api.redlink.pl",
      "description": "Production server"
    }
  ],
  "paths": {
    "/v2.1/contact": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List contacts",
        "description": "Use this method to get a list of all existing contacts.",
        "operationId": "ContactsListingV2",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/group"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/externalId"
          },
          {
            "$ref": "#/components/parameters/phoneNumber"
          },
          {
            "$ref": "#/components/parameters/email"
          },
          {
            "$ref": "#/components/parameters/inArchive"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactObjectV2"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&group=SOME_INTEGER_VALUE&id=SOME_INTEGER_VALUE&externalId=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&email=SOME_STRING_VALUE&inArchive=SOME_BOOL_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&group=SOME_INTEGER_VALUE&id=SOME_INTEGER_VALUE&externalId=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&email=SOME_STRING_VALUE&inArchive=SOME_BOOL_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&group=SOME_INTEGER_VALUE&id=SOME_INTEGER_VALUE&externalId=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&email=SOME_STRING_VALUE&inArchive=SOME_BOOL_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/contact',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    group: 'SOME_INTEGER_VALUE',\n    id: 'SOME_INTEGER_VALUE',\n    externalId: 'SOME_STRING_VALUE',\n    phoneNumber: 'SOME_STRING_VALUE',\n    email: 'SOME_STRING_VALUE',\n    inArchive: 'SOME_BOOL_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&group=SOME_INTEGER_VALUE&id=SOME_INTEGER_VALUE&externalId=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&email=SOME_STRING_VALUE&inArchive=SOME_BOOL_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"group\":\"SOME_INTEGER_VALUE\",\"id\":\"SOME_INTEGER_VALUE\",\"externalId\":\"SOME_STRING_VALUE\",\"phoneNumber\":\"SOME_STRING_VALUE\",\"email\":\"SOME_STRING_VALUE\",\"inArchive\":\"SOME_BOOL_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&group=SOME_INTEGER_VALUE&id=SOME_INTEGER_VALUE&externalId=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&email=SOME_STRING_VALUE&inArchive=SOME_BOOL_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&group=SOME_INTEGER_VALUE&id=SOME_INTEGER_VALUE&externalId=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&email=SOME_STRING_VALUE&inArchive=SOME_BOOL_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact",
        "description": "Use this method to update details of certain contact.",
        "operationId": "UpdatingContacts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UpdateContactInput"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"externalId\\\":\\\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\\\",\\\"data\\\":{\\\"companyName\\\":\\\"Example company\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false}}}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact\"\n\n\tpayload := strings.NewReader(\"[{\\\"externalId\\\":\\\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\\\",\\\"data\\\":{\\\"companyName\\\":\\\"Example company\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false}}}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://api.redlink.pl/v2.1/contact\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"[{\\\"externalId\\\":\\\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\\\",\\\"data\\\":{\\\"companyName\\\":\\\"Example company\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false}}}]\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PUT',\n  url: 'https://api.redlink.pl/v2.1/contact',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: [\n    {\n      externalId: 'bfa0b1b1-e636-b8ab-aba4-78a913be0144',\n      data: {\n        companyName: 'Example company',\n        email: 'test@test.pl',\n        externalId: 'XXX-XXX-XXX',\n        firstName: 'First name',\n        lastName: 'Last name',\n        phoneNumber: '123123123',\n        externalData: {test: 'test', createdAt: '1989-09-28', isClient: false}\n      }\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"[{\\\"externalId\\\":\\\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\\\",\\\"data\\\":{\\\"companyName\\\":\\\"Example company\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false}}}]\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact\"\n\npayload = \"[{\\\"externalId\\\":\\\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\\\",\\\"data\\\":{\\\"companyName\\\":\\\"Example company\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false}}}]\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"PUT\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"[{\\\"externalId\\\":\\\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\\\",\\\"data\\\":{\\\"companyName\\\":\\\"Example company\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false}}}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '[{\"externalId\":\"bfa0b1b1-e636-b8ab-aba4-78a913be0144\",\"data\":{\"companyName\":\"Example company\",\"email\":\"test@test.pl\",\"externalId\":\"XXX-XXX-XXX\",\"firstName\":\"First name\",\"lastName\":\"Last name\",\"phoneNumber\":\"123123123\",\"externalData\":{\"test\":\"test\",\"createdAt\":\"1989-09-28\",\"isClient\":false}}}]' |  \\\n  http PUT https://api.redlink.pl/v2.1/contact \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/json\":\"test\",\"createdAt\":\"1989-09-28\",\"isClient\":false}}}]'"
          }
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Add contact",
        "description": "Use this method to create a new contact object.",
        "operationId": "AddingContacts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/AddContactInput"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ShortContactObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"companyName\\\":\\\"Example company\\\",\\\"createdAt\\\":\\\"2019-02-01 20:12:12\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false},\\\"addToGroup\\\":[0]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact\"\n\n\tpayload := strings.NewReader(\"[{\\\"companyName\\\":\\\"Example company\\\",\\\"createdAt\\\":\\\"2019-02-01 20:12:12\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false},\\\"addToGroup\\\":[0]}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/contact\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"[{\\\"companyName\\\":\\\"Example company\\\",\\\"createdAt\\\":\\\"2019-02-01 20:12:12\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false},\\\"addToGroup\\\":[0]}]\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/contact',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: [\n    {\n      companyName: 'Example company',\n      createdAt: '2019-02-01 20:12:12',\n      email: 'test@test.pl',\n      externalId: 'XXX-XXX-XXX',\n      firstName: 'First name',\n      lastName: 'Last name',\n      phoneNumber: '123123123',\n      externalData: {test: 'test', createdAt: '1989-09-28', isClient: false},\n      addToGroup: [0]\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"[{\\\"companyName\\\":\\\"Example company\\\",\\\"createdAt\\\":\\\"2019-02-01 20:12:12\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false},\\\"addToGroup\\\":[0]}]\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact\"\n\npayload = \"[{\\\"companyName\\\":\\\"Example company\\\",\\\"createdAt\\\":\\\"2019-02-01 20:12:12\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false},\\\"addToGroup\\\":[0]}]\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"[{\\\"companyName\\\":\\\"Example company\\\",\\\"createdAt\\\":\\\"2019-02-01 20:12:12\\\",\\\"email\\\":\\\"test@test.pl\\\",\\\"externalId\\\":\\\"XXX-XXX-XXX\\\",\\\"firstName\\\":\\\"First name\\\",\\\"lastName\\\":\\\"Last name\\\",\\\"phoneNumber\\\":\\\"123123123\\\",\\\"externalData\\\":{\\\"test\\\":\\\"test\\\",\\\"createdAt\\\":\\\"1989-09-28\\\",\\\"isClient\\\":false},\\\"addToGroup\\\":[0]}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '[{\"companyName\":\"Example company\",\"createdAt\":\"2019-02-01 20:12:12\",\"email\":\"test@test.pl\",\"externalId\":\"XXX-XXX-XXX\",\"firstName\":\"First name\",\"lastName\":\"Last name\",\"phoneNumber\":\"123123123\",\"externalData\":{\"test\":\"test\",\"createdAt\":\"1989-09-28\",\"isClient\":false},\"addToGroup\":[0]}]' |  \\\n  http POST https://api.redlink.pl/v2.1/contact \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsondAt\":\"1989-09-28\",\"isClient\":false},\"addToGroup\":[0]}]'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact",
        "description": "Use this method to delete contact.",
        "operationId": "DeleteContact",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/contact\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/contact',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http DELETE https://api.redlink.pl/v2.1/contact \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      }
    },
    "/v2.1/contact/resubscribe/{channel}": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Resubscribe contact",
        "description": "Use this method to resubscribe a contact from a single channel or all of them at once.",
        "operationId": "ResubscribeContact",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "description": "Set in url.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push",
                "all"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http POST https://api.redlink.pl/v2.1/contact/resubscribe/%7Bchannel%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      }
    },
    "/v2.1/contact/unsubscribe/{channel}": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Unsubscribe contact",
        "description": "Use this method to unsubscribe a contact from a single channel or all of them at once.",
        "operationId": "UsubscribeContact",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "description": "Set in url.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push",
                "all"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http POST https://api.redlink.pl/v2.1/contact/unsubscribe/%7Bchannel%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      }
    },
    "/v2.1/sms/statuses": {
      "get": {
        "tags": [
          "Sms"
        ],
        "summary": "Get statuses of SMS",
        "description": "Use this method to get all SMS statuses.",
        "operationId": "statuses",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Start of the time range. Time of dlr appearance.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "End of the time range. Time of dlr appearance.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "name": "sender",
            "in": "query",
            "description": "List of senders. (max 10)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Sender1,Sender2,Sender3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsDLRObjectV2"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/sms/statuses?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&sender=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/sms/statuses?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&sender=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/sms/statuses?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&sender=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/sms/statuses',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    dateTo: 'SOME_STRING_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    sender: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/sms/statuses?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&sender=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/sms/statuses\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"sender\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/sms/statuses?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&sender=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/sms/statuses?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&sender=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/mail": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Send email campaign",
        "description": "Use this method to send emails to a group of contacts created through endpoint Create group method.",
        "operationId": "EmailCampaignSending",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCampaignInputObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "externalId": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/mail\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"campaignId\\\":\\\"first-campaign-id\\\",\\\"name\\\":\\\"firstCampaign\\\",\\\"description\\\":\\\"My first campaign\\\",\\\"subject\\\":\\\"Hello world\\\",\\\"fromName\\\":\\\"John Doe\\\",\\\"fromAddress\\\":\\\"john.doe@example.pl\\\",\\\"replyTo\\\":\\\"john.doe@example.pl\\\",\\\"htmlFromWebSiteUrl\\\":\\\"string\\\",\\\"htmlContent\\\":\\\"<h1> hello there</h1>\\\",\\\"textContent\\\":\\\"hello there!\\\",\\\"groupId\\\":\\\"test-group-id\\\",\\\"trackLinks\\\":true,\\\"googleAnalytics\\\":true,\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"state\\\":\\\"editable\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"],\\\"confirmationAddresses\\\":[\\\"john.doe@example.pl\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/mail\"\n\n\tpayload := strings.NewReader(\"{\\\"campaignId\\\":\\\"first-campaign-id\\\",\\\"name\\\":\\\"firstCampaign\\\",\\\"description\\\":\\\"My first campaign\\\",\\\"subject\\\":\\\"Hello world\\\",\\\"fromName\\\":\\\"John Doe\\\",\\\"fromAddress\\\":\\\"john.doe@example.pl\\\",\\\"replyTo\\\":\\\"john.doe@example.pl\\\",\\\"htmlFromWebSiteUrl\\\":\\\"string\\\",\\\"htmlContent\\\":\\\"<h1> hello there</h1>\\\",\\\"textContent\\\":\\\"hello there!\\\",\\\"groupId\\\":\\\"test-group-id\\\",\\\"trackLinks\\\":true,\\\"googleAnalytics\\\":true,\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"state\\\":\\\"editable\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"],\\\"confirmationAddresses\\\":[\\\"john.doe@example.pl\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/campaign/mail\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"campaignId\\\":\\\"first-campaign-id\\\",\\\"name\\\":\\\"firstCampaign\\\",\\\"description\\\":\\\"My first campaign\\\",\\\"subject\\\":\\\"Hello world\\\",\\\"fromName\\\":\\\"John Doe\\\",\\\"fromAddress\\\":\\\"john.doe@example.pl\\\",\\\"replyTo\\\":\\\"john.doe@example.pl\\\",\\\"htmlFromWebSiteUrl\\\":\\\"string\\\",\\\"htmlContent\\\":\\\"<h1> hello there</h1>\\\",\\\"textContent\\\":\\\"hello there!\\\",\\\"groupId\\\":\\\"test-group-id\\\",\\\"trackLinks\\\":true,\\\"googleAnalytics\\\":true,\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"state\\\":\\\"editable\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"],\\\"confirmationAddresses\\\":[\\\"john.doe@example.pl\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/campaign/mail',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    campaignId: 'first-campaign-id',\n    name: 'firstCampaign',\n    description: 'My first campaign',\n    subject: 'Hello world',\n    fromName: 'John Doe',\n    fromAddress: 'john.doe@example.pl',\n    replyTo: 'john.doe@example.pl',\n    htmlFromWebSiteUrl: 'string',\n    htmlContent: '<h1> hello there</h1>',\n    textContent: 'hello there!',\n    groupId: 'test-group-id',\n    trackLinks: true,\n    googleAnalytics: true,\n    scheduleTime: '2020-09-10 10:15:00',\n    state: 'editable',\n    testAddresses: ['john.doe@example.pl'],\n    confirmationAddresses: ['john.doe@example.pl']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/mail\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"campaignId\\\":\\\"first-campaign-id\\\",\\\"name\\\":\\\"firstCampaign\\\",\\\"description\\\":\\\"My first campaign\\\",\\\"subject\\\":\\\"Hello world\\\",\\\"fromName\\\":\\\"John Doe\\\",\\\"fromAddress\\\":\\\"john.doe@example.pl\\\",\\\"replyTo\\\":\\\"john.doe@example.pl\\\",\\\"htmlFromWebSiteUrl\\\":\\\"string\\\",\\\"htmlContent\\\":\\\"<h1> hello there</h1>\\\",\\\"textContent\\\":\\\"hello there!\\\",\\\"groupId\\\":\\\"test-group-id\\\",\\\"trackLinks\\\":true,\\\"googleAnalytics\\\":true,\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"state\\\":\\\"editable\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"],\\\"confirmationAddresses\\\":[\\\"john.doe@example.pl\\\"]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/mail\"\n\npayload = \"{\\\"campaignId\\\":\\\"first-campaign-id\\\",\\\"name\\\":\\\"firstCampaign\\\",\\\"description\\\":\\\"My first campaign\\\",\\\"subject\\\":\\\"Hello world\\\",\\\"fromName\\\":\\\"John Doe\\\",\\\"fromAddress\\\":\\\"john.doe@example.pl\\\",\\\"replyTo\\\":\\\"john.doe@example.pl\\\",\\\"htmlFromWebSiteUrl\\\":\\\"string\\\",\\\"htmlContent\\\":\\\"<h1> hello there</h1>\\\",\\\"textContent\\\":\\\"hello there!\\\",\\\"groupId\\\":\\\"test-group-id\\\",\\\"trackLinks\\\":true,\\\"googleAnalytics\\\":true,\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"state\\\":\\\"editable\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"],\\\"confirmationAddresses\\\":[\\\"john.doe@example.pl\\\"]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/mail\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"campaignId\\\":\\\"first-campaign-id\\\",\\\"name\\\":\\\"firstCampaign\\\",\\\"description\\\":\\\"My first campaign\\\",\\\"subject\\\":\\\"Hello world\\\",\\\"fromName\\\":\\\"John Doe\\\",\\\"fromAddress\\\":\\\"john.doe@example.pl\\\",\\\"replyTo\\\":\\\"john.doe@example.pl\\\",\\\"htmlFromWebSiteUrl\\\":\\\"string\\\",\\\"htmlContent\\\":\\\"<h1> hello there</h1>\\\",\\\"textContent\\\":\\\"hello there!\\\",\\\"groupId\\\":\\\"test-group-id\\\",\\\"trackLinks\\\":true,\\\"googleAnalytics\\\":true,\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"state\\\":\\\"editable\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"],\\\"confirmationAddresses\\\":[\\\"john.doe@example.pl\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url https://api.redlink.pl/v2.1/campaign/mail \\\n  --header 'application-key: REPLACE_KEY_VALUE' \\\n  --header 'authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"campaignId\":\"first-campaign-id\",\"name\":\"firstCampaign\",\"description\":\"My first campaign\",\"subject\":\"Hello world\",\"fromName\":\"John Doe\",\"fromAddress\":\"john.doe@example.pl\",\"replyTo\":\"john.doe@example.pl\",\"htmlFromWebSiteUrl\":\"string\",\"htmlContent\":\"<h1> hello there</h1>\",\"textContent\":\"hello there!\",\"groupId\":\"test-group-id\",\"trackLinks\":true,\"googleAnalytics\":true,\"scheduleTime\":\"2020-09-10 10:15:00\",\"state\":\"editable\",\"testAddresses\":[\"john.doe@example.pl\"],\"confirmationAddresses\":[\"john.doe@example.pl\"]}'"
          }
        ]
      }
    },
    "/v2.1/campaign/email/{campaignId}/report/click": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get email campaign clicks",
        "description": "Use this method to get details of email clicks from a certain date range. Please remember clicks are stored for 90 days.",
        "operationId": "EmailCampaignClickListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          },
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailCampaignClick"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/email": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List email campaigns",
        "description": "Use this method to list all campaigns and its details from a certain time range.",
        "operationId": "EmailCampaignListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailCampaign"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/email?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/email?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/email?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/email',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/email?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/email\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/email?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/email?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/email/{campaignId}/report/open": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get email campaign opens",
        "description": "Use this method to get details of email opens from a certain date range. Please remember opens are stored for 90 days.",
        "operationId": "EmailCampaignOrListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          },
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailCampaignOpen"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/open?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/email/report/recipient": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List email campaign recipients",
        "description": "Use this method to get all recipients from the email campaign. You can filter recipients who have got bounce states as well.",
        "operationId": "EmailCampaignRecipientsListing",
        "parameters": [
          {
            "name": "campaignId",
            "in": "query",
            "description": "Search with campaign external ID",
            "schema": {
              "type": "string"
            },
            "example": "6F8EB428-0917-4DE7-BE1D-ACCD7432A4B8"
          },
          {
            "name": "bouncesOnly",
            "in": "query",
            "description": "If true then action will return only bounced recipients",
            "schema": {
              "type": "bool"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Search with date (UTC timezone)",
            "schema": {
              "type": "string",
              "pattern": "/(^\\d{4}-\\d{2}-\\d{2})\\s(\\d{2}:\\d{2}:\\d{2})$/",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Search with date (UTC timezone)",
            "schema": {
              "type": "string",
              "pattern": "/(^\\d{4}-\\d{2}-\\d{2})\\s(\\d{2}:\\d{2}:\\d{2})$/",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailCampaignsRecipient"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/email/report/recipient?campaignId=SOME_STRING_VALUE&bouncesOnly=SOME_BOOL_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/email/report/recipient?campaignId=SOME_STRING_VALUE&bouncesOnly=SOME_BOOL_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/email/report/recipient?campaignId=SOME_STRING_VALUE&bouncesOnly=SOME_BOOL_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/email/report/recipient',\n  qs: {\n    campaignId: 'SOME_STRING_VALUE',\n    bouncesOnly: 'SOME_BOOL_VALUE',\n    dateTo: 'SOME_STRING_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/email/report/recipient?campaignId=SOME_STRING_VALUE&bouncesOnly=SOME_BOOL_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/email/report/recipient\"\n\nquerystring = {\"campaignId\":\"SOME_STRING_VALUE\",\"bouncesOnly\":\"SOME_BOOL_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/email/report/recipient?campaignId=SOME_STRING_VALUE&bouncesOnly=SOME_BOOL_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/email/report/recipient?campaignId=SOME_STRING_VALUE&bouncesOnly=SOME_BOOL_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/email/{campaignId}/report/unsubscribe": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get email campaign unsubscribe report",
        "description": "Use this method to get date of a click on unsubscribe link and the email address of the unsubscribed.",
        "operationId": "EmailCampaignUnsubscribeListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          },
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailCampaign"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D/report/unsubscribe?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/push": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List push campaigns",
        "description": "Use this method to list all campaigns and its details from a certain time range.",
        "operationId": "PushCampaignListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PushCampaign"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/push?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/push?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/push?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/push',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/push?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/push\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/push?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/push?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/push/{externalId}/report/recipient": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List push campaign recipients",
        "description": "Use this method to get all recipients details from PUSH campaign.",
        "operationId": "PushCampaignRecipientsListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/externalId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PushCampaignRecipients"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient?externalId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient?externalId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient?externalId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient',\n  qs: {\n    externalId: 'SOME_STRING_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient?externalId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient\"\n\nquerystring = {\"externalId\":\"SOME_STRING_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient?externalId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/push/%7BexternalId%7D/report/recipient?externalId=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/mail/{campaignId}": {
      "patch": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Change email campaign state",
        "description": "Use this method if you want to change the status of an already prepared or launched campaign. You can only start or cancel campaign. Each campaign gets statuses like editing, redytosend, sending and sent. If you cancel campaign that have sending state it will get sent state.",
        "operationId": "ChangeStateOfEmailCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "state": {
                    "enum": [
                      "sendable",
                      "canceled"
                    ]
                  },
                  "scheduleTime": {
                    "description": "The date the message will be set off. Be aware that if the campaign is going to be sent to many of recipients (thousands and more) the schedule date means then preparing all contacts firstly and then sending. For example, there is a campaign scheduled for 2020-01-01 10:00:00 so at 10 o'clock our system will start to collect all contacts from chosen group which can take sometimes more than an hour and then the messages will be sent to recipients. ",
                    "type": "string",
                    "pattern": "/^\\d{4}-\\d{2}-\\d{2}\\s*(?:\\d{2}:\\d{2}(?::\\d{2})?)?$/",
                    "example": "2020-09-10 10:15:00"
                  },
                  "testAddresses": {
                    "description": "The email addresses to send the campaign to see if the message is ok.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "john.doe@example.pl"
                    },
                    "minItems": 1
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"state\\\":\\\"sendable\\\",\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"state\\\":\\\"sendable\\\",\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"state\\\":\\\"sendable\\\",\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    state: 'sendable',\n    scheduleTime: '2020-09-10 10:15:00',\n    testAddresses: ['john.doe@example.pl']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"state\\\":\\\"sendable\\\",\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D\"\n\npayload = \"{\\\"state\\\":\\\"sendable\\\",\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"PATCH\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"state\\\":\\\"sendable\\\",\\\"scheduleTime\\\":\\\"2020-09-10 10:15:00\\\",\\\"testAddresses\\\":[\\\"john.doe@example.pl\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"state\":\"sendable\",\"scheduleTime\":\"2020-09-10 10:15:00\",\"testAddresses\":[\"john.doe@example.pl\"]}' |  \\\n  http PATCH https://api.redlink.pl/v2.1/campaign/mail/%7BcampaignId%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/json-10 10:15:00\",\"testAddresses\":[\"john.doe@example.pl\"]}'"
          }
        ]
      }
    },
    "/v2.1/campaign/email/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get single email campaign",
        "description": "Use this method to get all details of certain email campaign such as subject, fromAddress, groupId, scheduleTime and more.\n    ",
        "operationId": "GettingSingleEmailCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RunnableEmailCampaignOutputObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/campaign/email/%7BcampaignId%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/sms/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get single SMS campaign",
        "description": "Use this method to get all details of certain SMS campaign such as campaignId, senderId, message, scheduleTime and more.",
        "operationId": "GettingSingleSmsCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SingleSmsCampaign"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/sms/{campaignId}/report/click": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get sms campaign clicks",
        "description": "Use this method to get details of SMS clicks from a certain date range. Please remember clicks are stored for 90 days.",
        "operationId": "SmsCampaignClickListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          },
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsCampaignClick"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/click?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/sms": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List sms campaigns",
        "description": "Use this method to list all campaigns and its details from a certain time range.",
        "operationId": "SmsCampaignListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/dateFrom"
          },
          {
            "$ref": "#/components/parameters/dateTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsCampaign"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/sms?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/sms?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/sms?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/sms',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/sms?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/sms\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/sms?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/sms?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/sms/{campaignId}/report/recipient": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List sms campaign recipients",
        "description": "Use this method to get all recipients details from SMS campaign.",
        "operationId": "SmsCampaignRecipientsListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/campaignId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsCampaignsRecipient"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient',\n  qs: {limit: 'SOME_INTEGER_VALUE', offset: 'SOME_INTEGER_VALUE'},\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient\"\n\nquerystring = {\"limit\":\"SOME_INTEGER_VALUE\",\"offset\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/recipient?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/campaign/sms/{campaignId}/report/state": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get sms campaign state",
        "description": "Use this method to get sms campaign state. Available values: editing, readytosend, sending, sent and deliveredtosend.",
        "operationId": "SmsCampaignStateReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/campaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsCampaignsStateReport"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/campaign/sms/%7BcampaignId%7D/report/state \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/push": {
      "post": {
        "tags": [
          "Pushes"
        ],
        "summary": "Send push",
        "description": "Use this method to send mobile push notifications.",
        "operationId": "PushCreate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PushResponseObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/push\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"applications\\\":[\\\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\\"],\\\"to\\\":[{\\\"receiver\\\":\\\"example-device-id\\\",\\\"externalId\\\":\\\"xxx-xxx-xxx-xxx\\\",\\\"type\\\":1}],\\\"title\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"body\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"defaultLanguage\\\":\\\"pl\\\",\\\"image\\\":\\\"http://absolute.url/to/image\\\",\\\"silent\\\":false,\\\"sound\\\":\\\"sound-file.wav\\\",\\\"scheduleTime\\\":\\\"2020-01-01 12:12:12\\\",\\\"ttl\\\":1540377351,\\\"externalData\\\":{\\\"test\\\":\\\"x\\\",\\\"test1\\\":false},\\\"advanced\\\":{\\\"subtitle\\\":\\\"subtitle-only-ios\\\",\\\"lockscreenVisibility\\\":1,\\\"icon\\\":{\\\"small\\\":\\\"/relative-icon-file-path\\\",\\\"large\\\":\\\"/relative-icon-file-path\\\"}},\\\"action\\\":{\\\"url\\\":\\\"http://absolute.url/to/redirect/on/click\\\",\\\"type\\\":2},\\\"actionButtons\\\":[{\\\"button\\\":1,\\\"icon\\\":\\\"my_icon.png\\\",\\\"action\\\":{\\\"url\\\":\\\"www.google.pl\\\",\\\"type\\\":1}}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/push\"\n\n\tpayload := strings.NewReader(\"{\\\"applications\\\":[\\\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\\"],\\\"to\\\":[{\\\"receiver\\\":\\\"example-device-id\\\",\\\"externalId\\\":\\\"xxx-xxx-xxx-xxx\\\",\\\"type\\\":1}],\\\"title\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"body\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"defaultLanguage\\\":\\\"pl\\\",\\\"image\\\":\\\"http://absolute.url/to/image\\\",\\\"silent\\\":false,\\\"sound\\\":\\\"sound-file.wav\\\",\\\"scheduleTime\\\":\\\"2020-01-01 12:12:12\\\",\\\"ttl\\\":1540377351,\\\"externalData\\\":{\\\"test\\\":\\\"x\\\",\\\"test1\\\":false},\\\"advanced\\\":{\\\"subtitle\\\":\\\"subtitle-only-ios\\\",\\\"lockscreenVisibility\\\":1,\\\"icon\\\":{\\\"small\\\":\\\"/relative-icon-file-path\\\",\\\"large\\\":\\\"/relative-icon-file-path\\\"}},\\\"action\\\":{\\\"url\\\":\\\"http://absolute.url/to/redirect/on/click\\\",\\\"type\\\":2},\\\"actionButtons\\\":[{\\\"button\\\":1,\\\"icon\\\":\\\"my_icon.png\\\",\\\"action\\\":{\\\"url\\\":\\\"www.google.pl\\\",\\\"type\\\":1}}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/push\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"applications\\\":[\\\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\\"],\\\"to\\\":[{\\\"receiver\\\":\\\"example-device-id\\\",\\\"externalId\\\":\\\"xxx-xxx-xxx-xxx\\\",\\\"type\\\":1}],\\\"title\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"body\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"defaultLanguage\\\":\\\"pl\\\",\\\"image\\\":\\\"http://absolute.url/to/image\\\",\\\"silent\\\":false,\\\"sound\\\":\\\"sound-file.wav\\\",\\\"scheduleTime\\\":\\\"2020-01-01 12:12:12\\\",\\\"ttl\\\":1540377351,\\\"externalData\\\":{\\\"test\\\":\\\"x\\\",\\\"test1\\\":false},\\\"advanced\\\":{\\\"subtitle\\\":\\\"subtitle-only-ios\\\",\\\"lockscreenVisibility\\\":1,\\\"icon\\\":{\\\"small\\\":\\\"/relative-icon-file-path\\\",\\\"large\\\":\\\"/relative-icon-file-path\\\"}},\\\"action\\\":{\\\"url\\\":\\\"http://absolute.url/to/redirect/on/click\\\",\\\"type\\\":2},\\\"actionButtons\\\":[{\\\"button\\\":1,\\\"icon\\\":\\\"my_icon.png\\\",\\\"action\\\":{\\\"url\\\":\\\"www.google.pl\\\",\\\"type\\\":1}}]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/push',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    applications: ['XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'],\n    to: [{receiver: 'example-device-id', externalId: 'xxx-xxx-xxx-xxx', type: 1}],\n    title: {pl: 'test', en: 'test'},\n    body: {pl: 'test', en: 'test'},\n    defaultLanguage: 'pl',\n    image: 'http://absolute.url/to/image',\n    silent: false,\n    sound: 'sound-file.wav',\n    scheduleTime: '2020-01-01 12:12:12',\n    ttl: 1540377351,\n    externalData: {test: 'x', test1: false},\n    advanced: {\n      subtitle: 'subtitle-only-ios',\n      lockscreenVisibility: 1,\n      icon: {small: '/relative-icon-file-path', large: '/relative-icon-file-path'}\n    },\n    action: {url: 'http://absolute.url/to/redirect/on/click', type: 2},\n    actionButtons: [{button: 1, icon: 'my_icon.png', action: {url: 'www.google.pl', type: 1}}]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/push\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"applications\\\":[\\\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\\"],\\\"to\\\":[{\\\"receiver\\\":\\\"example-device-id\\\",\\\"externalId\\\":\\\"xxx-xxx-xxx-xxx\\\",\\\"type\\\":1}],\\\"title\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"body\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"defaultLanguage\\\":\\\"pl\\\",\\\"image\\\":\\\"http://absolute.url/to/image\\\",\\\"silent\\\":false,\\\"sound\\\":\\\"sound-file.wav\\\",\\\"scheduleTime\\\":\\\"2020-01-01 12:12:12\\\",\\\"ttl\\\":1540377351,\\\"externalData\\\":{\\\"test\\\":\\\"x\\\",\\\"test1\\\":false},\\\"advanced\\\":{\\\"subtitle\\\":\\\"subtitle-only-ios\\\",\\\"lockscreenVisibility\\\":1,\\\"icon\\\":{\\\"small\\\":\\\"/relative-icon-file-path\\\",\\\"large\\\":\\\"/relative-icon-file-path\\\"}},\\\"action\\\":{\\\"url\\\":\\\"http://absolute.url/to/redirect/on/click\\\",\\\"type\\\":2},\\\"actionButtons\\\":[{\\\"button\\\":1,\\\"icon\\\":\\\"my_icon.png\\\",\\\"action\\\":{\\\"url\\\":\\\"www.google.pl\\\",\\\"type\\\":1}}]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/push\"\n\npayload = \"{\\\"applications\\\":[\\\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\\"],\\\"to\\\":[{\\\"receiver\\\":\\\"example-device-id\\\",\\\"externalId\\\":\\\"xxx-xxx-xxx-xxx\\\",\\\"type\\\":1}],\\\"title\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"body\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"defaultLanguage\\\":\\\"pl\\\",\\\"image\\\":\\\"http://absolute.url/to/image\\\",\\\"silent\\\":false,\\\"sound\\\":\\\"sound-file.wav\\\",\\\"scheduleTime\\\":\\\"2020-01-01 12:12:12\\\",\\\"ttl\\\":1540377351,\\\"externalData\\\":{\\\"test\\\":\\\"x\\\",\\\"test1\\\":false},\\\"advanced\\\":{\\\"subtitle\\\":\\\"subtitle-only-ios\\\",\\\"lockscreenVisibility\\\":1,\\\"icon\\\":{\\\"small\\\":\\\"/relative-icon-file-path\\\",\\\"large\\\":\\\"/relative-icon-file-path\\\"}},\\\"action\\\":{\\\"url\\\":\\\"http://absolute.url/to/redirect/on/click\\\",\\\"type\\\":2},\\\"actionButtons\\\":[{\\\"button\\\":1,\\\"icon\\\":\\\"my_icon.png\\\",\\\"action\\\":{\\\"url\\\":\\\"www.google.pl\\\",\\\"type\\\":1}}]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/push\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"applications\\\":[\\\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\\\"],\\\"to\\\":[{\\\"receiver\\\":\\\"example-device-id\\\",\\\"externalId\\\":\\\"xxx-xxx-xxx-xxx\\\",\\\"type\\\":1}],\\\"title\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"body\\\":{\\\"pl\\\":\\\"test\\\",\\\"en\\\":\\\"test\\\"},\\\"defaultLanguage\\\":\\\"pl\\\",\\\"image\\\":\\\"http://absolute.url/to/image\\\",\\\"silent\\\":false,\\\"sound\\\":\\\"sound-file.wav\\\",\\\"scheduleTime\\\":\\\"2020-01-01 12:12:12\\\",\\\"ttl\\\":1540377351,\\\"externalData\\\":{\\\"test\\\":\\\"x\\\",\\\"test1\\\":false},\\\"advanced\\\":{\\\"subtitle\\\":\\\"subtitle-only-ios\\\",\\\"lockscreenVisibility\\\":1,\\\"icon\\\":{\\\"small\\\":\\\"/relative-icon-file-path\\\",\\\"large\\\":\\\"/relative-icon-file-path\\\"}},\\\"action\\\":{\\\"url\\\":\\\"http://absolute.url/to/redirect/on/click\\\",\\\"type\\\":2},\\\"actionButtons\\\":[{\\\"button\\\":1,\\\"icon\\\":\\\"my_icon.png\\\",\\\"action\\\":{\\\"url\\\":\\\"www.google.pl\\\",\\\"type\\\":1}}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"applications\":[\"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"],\"to\":[{\"receiver\":\"example-device-id\",\"externalId\":\"xxx-xxx-xxx-xxx\",\"type\":1}],\"title\":{\"pl\":\"test\",\"en\":\"test\"},\"body\":{\"pl\":\"test\",\"en\":\"test\"},\"defaultLanguage\":\"pl\",\"image\":\"http://absolute.url/to/image\",\"silent\":false,\"sound\":\"sound-file.wav\",\"scheduleTime\":\"2020-01-01 12:12:12\",\"ttl\":1540377351,\"externalData\":{\"test\":\"x\",\"test1\":false},\"advanced\":{\"subtitle\":\"subtitle-only-ios\",\"lockscreenVisibility\":1,\"icon\":{\"small\":\"/relative-icon-file-path\",\"large\":\"/relative-icon-file-path\"}},\"action\":{\"url\":\"http://absolute.url/to/redirect/on/click\",\"type\":2},\"actionButtons\":[{\"button\":1,\"icon\":\"my_icon.png\",\"action\":{\"url\":\"www.google.pl\",\"type\":1}}]}' |  \\\n  http POST https://api.redlink.pl/v2.1/push \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonicon.png\",\"action\":{\"url\":\"www.google.pl\",\"type\":1}}]}'"
          }
        ]
      }
    },
    "/v2.1/contact/{id}/group": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List groups for contact",
        "description": "Use this method to list all groups that the contact belongs to.",
        "operationId": "ShowGroupsOfContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the contact.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/contact/%7Bid%7D/group',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/contact/%7Bid%7D/group \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Add group to contact",
        "description": "Use this method to add contact to an existing group.",
        "operationId": "AddGroupsToContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the contact.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/contact/%7Bid%7D/group',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http POST https://api.redlink.pl/v2.1/contact/%7Bid%7D/group \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete groups from contact",
        "description": "Action allows to delete groups from contact",
        "operationId": "DeleteGroupsFromContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the contact.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/contact/%7Bid%7D/group',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/%7Bid%7D/group\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url https://api.redlink.pl/v2.1/contact/%7Bid%7D/group \\\n  --header 'application-key: REPLACE_KEY_VALUE' \\\n  --header 'authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      }
    },
    "/v2.1/contact/field": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List contact's additional fields",
        "description": "Use this method to list all additional fields added as externalData in ‘add contact’ method.",
        "operationId": "AdditionalFieldListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdditionalField"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/field?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/field?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/contact/field?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/contact/field',\n  qs: {offset: 'SOME_INTEGER_VALUE', limit: 'SOME_INTEGER_VALUE'},\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/field?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/field\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/field?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/contact/field?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/contact/segment": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List segments",
        "description": "Use this method to list all segments created in your account panel.",
        "operationId": "SegmentsListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Segment"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/segment?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/segment?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/contact/segment?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/contact/segment',\n  qs: {offset: 'SOME_INTEGER_VALUE', limit: 'SOME_INTEGER_VALUE'},\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/segment?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/segment\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/segment?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/contact/segment?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/contact/segment/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get single segment",
        "description": "Use this method to get count of all contacts in the segment.",
        "operationId": "GetSingleSegment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SegmentCount"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/contact/segment/%7Bid%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/email/template": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Get template list",
        "description": "Use this method to list all created email templates.",
        "operationId": "GetTemplatesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/smtpAccount"
          },
          {
            "$ref": "#/components/parameters/externalId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TemplateObjectWithTime"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/template?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&externalId=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/template?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&externalId=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/email/template?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&externalId=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/email/template',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    smtpAccount: 'SOME_STRING_VALUE',\n    externalId: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/template?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&externalId=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/template\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"smtpAccount\":\"SOME_STRING_VALUE\",\"externalId\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/template?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&externalId=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/email/template?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&externalId=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Add template",
        "description": "Use this method to add email template which you can use with the Send emails method.",
        "operationId": "AddingTemplates",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/template\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"html\\\":\\\"string\\\",\\\"text\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"externalId\\\":\\\"string\\\",\\\"smtpAccount\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/template\"\n\n\tpayload := strings.NewReader(\"{\\\"html\\\":\\\"string\\\",\\\"text\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"externalId\\\":\\\"string\\\",\\\"smtpAccount\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/email/template\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"html\\\":\\\"string\\\",\\\"text\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"externalId\\\":\\\"string\\\",\\\"smtpAccount\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/email/template',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    html: 'string',\n    text: 'string',\n    name: 'string',\n    externalId: 'string',\n    smtpAccount: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/template\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"html\\\":\\\"string\\\",\\\"text\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"externalId\\\":\\\"string\\\",\\\"smtpAccount\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/template\"\n\npayload = \"{\\\"html\\\":\\\"string\\\",\\\"text\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"externalId\\\":\\\"string\\\",\\\"smtpAccount\\\":\\\"string\\\"}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/template\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"html\\\":\\\"string\\\",\\\"text\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"externalId\\\":\\\"string\\\",\\\"smtpAccount\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"html\":\"string\",\"text\":\"string\",\"name\":\"string\",\"externalId\":\"string\",\"smtpAccount\":\"string\"}' |  \\\n  http POST https://api.redlink.pl/v2.1/email/template \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/json\"string\",\"externalId\":\"string\",\"smtpAccount\":\"string\"}'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Emails"
        ],
        "summary": "Delete template",
        "description": "Use this method to delete email templates.",
        "operationId": "DeleteTemplates",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtIdInputTemplates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/template\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"externalId\\\":[\\\"XXX-XXX\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/template\"\n\n\tpayload := strings.NewReader(\"{\\\"externalId\\\":[\\\"XXX-XXX\\\"]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/email/template\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"externalId\\\":[\\\"XXX-XXX\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/email/template',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {externalId: ['XXX-XXX']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/template\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"externalId\\\":[\\\"XXX-XXX\\\"]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/template\"\n\npayload = \"{\\\"externalId\\\":[\\\"XXX-XXX\\\"]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/template\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"externalId\\\":[\\\"XXX-XXX\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url https://api.redlink.pl/v2.1/email/template \\\n  --header 'application-key: REPLACE_KEY_VALUE' \\\n  --header 'authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"externalId\":[\"XXX-XXX\"]}'"
          }
        ]
      }
    },
    "/v2.1/email/domain/blacklist/{smtp}": {
      "get": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Get blacklist domains",
        "description": "Use this method to list all domains that are on your blacklist.",
        "operationId": "GetDomainsFromBlacklist",
        "parameters": [
          {
            "name": "smtp",
            "in": "path",
            "description": "The name of your smtp account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1.test.smtp"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "description": "List of email addresses that should be deleted from blacklist",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "post": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Add domains to blacklist",
        "description": "Use this method to add domains to the blacklist. Each email address with blacklisted domain will be omitted in future transactional email sending.",
        "operationId": "AddDomainToBlacklist",
        "parameters": [
          {
            "name": "smtp",
            "in": "path",
            "description": "The name of your smtp account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1.test.smtp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlacklistDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"domain\\\":null}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"domain\\\":null}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"domain\\\":null}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {domain: null},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"domain\\\":null}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\"\n\npayload = \"{\\\"domain\\\":null}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"domain\\\":null}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"domain\":null}' |  \\\n  http POST https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonnt-type: application/json' \\\n  --data '{\"domain\":null}'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Delete domains from blacklist",
        "description": "Use this method to delete domains from the blacklist so addresses email with such domain won’t be omitted in the future transactional email sending.",
        "operationId": "DeleteBlacklistDomain",
        "parameters": [
          {
            "name": "smtp",
            "in": "path",
            "description": "SMTP account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1.test.smtp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "description": "List of domains that should be deleted from blacklist",
                    "type": "array",
                    "items": {
                      "description": "Domain",
                      "type": "string",
                      "example": "domain.com"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[\\\"domain.com\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[\\\"domain.com\\\"]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[\\\"domain.com\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: ['domain.com']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[\\\"domain.com\\\"]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\"\n\npayload = \"{\\\"id\\\":[\\\"domain.com\\\"]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[\\\"domain.com\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[\"domain.com\"]}' |  \\\n  http DELETE https://api.redlink.pl/v2.1/email/domain/blacklist/%7Bsmtp%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsone: application/json' \\\n  --data '{\"id\":[\"domain.com\"]}'"
          }
        ]
      }
    },
    "/v2.1/email/blacklist": {
      "get": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Get blacklisted email addresses",
        "description": "Use this method to list all email addresses that are on your blacklist.",
        "operationId": "BlacklistListing",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/smtpAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Blacklist"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/blacklist?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/blacklist?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/email/blacklist?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/email/blacklist',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    smtpAccount: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/blacklist?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/blacklist\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"smtpAccount\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/blacklist?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.redlink.pl/v2.1/email/blacklist?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE' \\\n  --header 'application-key: REPLACE_KEY_VALUE' \\\n  --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "post": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Add emails to blacklist",
        "description": "Use this method to add email addresses to the blacklist. Each email address in the blacklist will be omitted in future transactional email sending.",
        "operationId": "AddToBlacklist",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email address you want to add to the blacklist.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtpAccount",
            "in": "query",
            "description": "The name of your smtp account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason for adding the email address to the blacklist. Check all the available reason in List blacklist reasons method.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": " The additional information on the entry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Blacklist"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/blacklist?email=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&reason=SOME_STRING_VALUE&comment=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/blacklist?email=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&reason=SOME_STRING_VALUE&comment=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/email/blacklist?email=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&reason=SOME_STRING_VALUE&comment=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/email/blacklist',\n  qs: {\n    email: 'SOME_STRING_VALUE',\n    smtpAccount: 'SOME_STRING_VALUE',\n    reason: 'SOME_STRING_VALUE',\n    comment: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/blacklist?email=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&reason=SOME_STRING_VALUE&comment=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/blacklist\"\n\nquerystring = {\"email\":\"SOME_STRING_VALUE\",\"smtpAccount\":\"SOME_STRING_VALUE\",\"reason\":\"SOME_STRING_VALUE\",\"comment\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/blacklist?email=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&reason=SOME_STRING_VALUE&comment=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http POST 'https://api.redlink.pl/v2.1/email/blacklist?email=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&reason=SOME_STRING_VALUE&comment=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/email/blacklist/{smtp}": {
      "delete": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Delete email addresses from blacklist",
        "description": "Use this method to delete email addresses from the blacklist so they won’t be omitted in the future transactional email sending.",
        "operationId": "DeleteBlacklist",
        "parameters": [
          {
            "name": "smtp",
            "in": "path",
            "description": "The name of your smtp account.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1.test.smtp"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "description": "List of emails that should be deleted from blacklist",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "mail@mail.com"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[\\\"mail@mail.com\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[\\\"mail@mail.com\\\"]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[\\\"mail@mail.com\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: ['mail@mail.com']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[\\\"mail@mail.com\\\"]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D\"\n\npayload = \"{\\\"id\\\":[\\\"mail@mail.com\\\"]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[\\\"mail@mail.com\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[\"mail@mail.com\"]}' |  \\\n  http DELETE https://api.redlink.pl/v2.1/email/blacklist/%7Bsmtp%7D \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonapplication/json' \\\n  --data '{\"id\":[\"mail@mail.com\"]}'"
          }
        ]
      }
    },
    "/v2.1/email/blacklist/reason": {
      "options": {
        "tags": [
          "Blacklist"
        ],
        "summary": "List blacklist reasons",
        "description": "This method allows you to get list of blacklist reasons. At this moment we have provided 4 reasons which are hardbounce, unsubscribe, spam_complaint and other. Run this method once in a while to check if there are new reasons added.",
        "operationId": "BlacklistReasonsListing",
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/blacklist/reason\");\nvar request = new RestRequest(Method.OPTIONS);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/blacklist/reason\"\n\n\treq, _ := http.NewRequest(\"OPTIONS\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.options(\"https://api.redlink.pl/v2.1/email/blacklist/reason\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'OPTIONS',\n  url: 'https://api.redlink.pl/v2.1/email/blacklist/reason',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/blacklist/reason\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"OPTIONS\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/blacklist/reason\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"OPTIONS\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/blacklist/reason\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Options.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http OPTIONS https://api.redlink.pl/v2.1/email/blacklist/reason \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/email/click": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Get email clicks",
        "description": "Use this method to get details of clicks such as date, IP, browser, operation system and more. Please remember the clicks are stored for 7 days.",
        "operationId": "EmailClicks",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Search with date. The difference between dateTo and dateFrom cannot be more than 3 days.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Search with date. The difference between dateTo and dateFrom cannot be more than 3 days.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "$ref": "#/components/parameters/smtpAccount"
          },
          {
            "$ref": "#/components/parameters/messageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailClick"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/click?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/click?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/email/click?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/email/click',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    dateTo: 'SOME_STRING_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    smtpAccount: 'SOME_STRING_VALUE',\n    messageId: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/click?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/click\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"smtpAccount\":\"SOME_STRING_VALUE\",\"messageId\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/click?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/email/click?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/email": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Get email statuses",
        "description": "Use this method to get details of the email with statuses such as injected, ok, softbounce, hardbounce, spambounce, deffered and dropped.",
        "operationId": "GetEmailStatuses",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/smtpAccount"
          },
          {
            "$ref": "#/components/parameters/messageId"
          },
          {
            "$ref": "#/components/parameters/to"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailStatusObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE&to=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE&to=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/email?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE&to=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/email',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    smtpAccount: 'SOME_STRING_VALUE',\n    messageId: 'SOME_STRING_VALUE',\n    to: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE&to=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"smtpAccount\":\"SOME_STRING_VALUE\",\"messageId\":\"SOME_STRING_VALUE\",\"to\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE&to=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/email?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE&to=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Send emails",
        "description": "Send new email through transactional API which means that you can send email to a single email address or an array of email addresses. You can send the message to a maximum of 200 recipients. The entire query should not exceed 10 MB, and should not exceed 10 000 elements. If you want to send email to a group created through Create group method please use Send email campaign.",
        "operationId": "SendEmails",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailStatusObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"subject\\\":\\\"Test email subject\\\",\\\"smtpAccount\\\":\\\"1.test.smtp\\\",\\\"tags\\\":[\\\"test-tag\\\"],\\\"content\\\":{\\\"html\\\":\\\"<h1>Hello world</h1>\\\",\\\"text\\\":\\\"Hello world\\\",\\\"templateId\\\":\\\"as2sCwq\\\"},\\\"bcc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"cc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"from\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"replyTo\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"headers\\\":{\\\"X-TEST-HEADER\\\":\\\"val\\\"},\\\"to\\\":[{\\\"email\\\":\\\"test@domena.pl\\\",\\\"name\\\":\\\"Test sender\\\",\\\"messageId\\\":\\\"test0001@domena.pl\\\",\\\"vars\\\":{\\\"test-var\\\":\\\"var-value\\\"}}],\\\"attachments\\\":[{\\\"fileName\\\":\\\"report.txt\\\",\\\"fileMime\\\":\\\"text/plain\\\",\\\"fileContent\\\":\\\"c29tZSBmaWxlIGNvbnRlbnQ=\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email\"\n\n\tpayload := strings.NewReader(\"{\\\"subject\\\":\\\"Test email subject\\\",\\\"smtpAccount\\\":\\\"1.test.smtp\\\",\\\"tags\\\":[\\\"test-tag\\\"],\\\"content\\\":{\\\"html\\\":\\\"<h1>Hello world</h1>\\\",\\\"text\\\":\\\"Hello world\\\",\\\"templateId\\\":\\\"as2sCwq\\\"},\\\"bcc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"cc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"from\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"replyTo\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"headers\\\":{\\\"X-TEST-HEADER\\\":\\\"val\\\"},\\\"to\\\":[{\\\"email\\\":\\\"test@domena.pl\\\",\\\"name\\\":\\\"Test sender\\\",\\\"messageId\\\":\\\"test0001@domena.pl\\\",\\\"vars\\\":{\\\"test-var\\\":\\\"var-value\\\"}}],\\\"attachments\\\":[{\\\"fileName\\\":\\\"report.txt\\\",\\\"fileMime\\\":\\\"text/plain\\\",\\\"fileContent\\\":\\\"c29tZSBmaWxlIGNvbnRlbnQ=\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/email\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"subject\\\":\\\"Test email subject\\\",\\\"smtpAccount\\\":\\\"1.test.smtp\\\",\\\"tags\\\":[\\\"test-tag\\\"],\\\"content\\\":{\\\"html\\\":\\\"<h1>Hello world</h1>\\\",\\\"text\\\":\\\"Hello world\\\",\\\"templateId\\\":\\\"as2sCwq\\\"},\\\"bcc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"cc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"from\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"replyTo\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"headers\\\":{\\\"X-TEST-HEADER\\\":\\\"val\\\"},\\\"to\\\":[{\\\"email\\\":\\\"test@domena.pl\\\",\\\"name\\\":\\\"Test sender\\\",\\\"messageId\\\":\\\"test0001@domena.pl\\\",\\\"vars\\\":{\\\"test-var\\\":\\\"var-value\\\"}}],\\\"attachments\\\":[{\\\"fileName\\\":\\\"report.txt\\\",\\\"fileMime\\\":\\\"text/plain\\\",\\\"fileContent\\\":\\\"c29tZSBmaWxlIGNvbnRlbnQ=\\\"}]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/email',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    subject: 'Test email subject',\n    smtpAccount: '1.test.smtp',\n    tags: ['test-tag'],\n    content: {html: '<h1>Hello world</h1>', text: 'Hello world', templateId: 'as2sCwq'},\n    bcc: [{email: 'string', name: 'string'}],\n    cc: [{email: 'string', name: 'string'}],\n    from: {email: 'string', name: 'string'},\n    replyTo: {email: 'string', name: 'string'},\n    headers: {'X-TEST-HEADER': 'val'},\n    to: [\n      {\n        email: 'test@domena.pl',\n        name: 'Test sender',\n        messageId: 'test0001@domena.pl',\n        vars: {'test-var': 'var-value'}\n      }\n    ],\n    attachments: [\n      {\n        fileName: 'report.txt',\n        fileMime: 'text/plain',\n        fileContent: 'c29tZSBmaWxlIGNvbnRlbnQ='\n      }\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"subject\\\":\\\"Test email subject\\\",\\\"smtpAccount\\\":\\\"1.test.smtp\\\",\\\"tags\\\":[\\\"test-tag\\\"],\\\"content\\\":{\\\"html\\\":\\\"<h1>Hello world</h1>\\\",\\\"text\\\":\\\"Hello world\\\",\\\"templateId\\\":\\\"as2sCwq\\\"},\\\"bcc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"cc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"from\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"replyTo\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"headers\\\":{\\\"X-TEST-HEADER\\\":\\\"val\\\"},\\\"to\\\":[{\\\"email\\\":\\\"test@domena.pl\\\",\\\"name\\\":\\\"Test sender\\\",\\\"messageId\\\":\\\"test0001@domena.pl\\\",\\\"vars\\\":{\\\"test-var\\\":\\\"var-value\\\"}}],\\\"attachments\\\":[{\\\"fileName\\\":\\\"report.txt\\\",\\\"fileMime\\\":\\\"text/plain\\\",\\\"fileContent\\\":\\\"c29tZSBmaWxlIGNvbnRlbnQ=\\\"}]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email\"\n\npayload = \"{\\\"subject\\\":\\\"Test email subject\\\",\\\"smtpAccount\\\":\\\"1.test.smtp\\\",\\\"tags\\\":[\\\"test-tag\\\"],\\\"content\\\":{\\\"html\\\":\\\"<h1>Hello world</h1>\\\",\\\"text\\\":\\\"Hello world\\\",\\\"templateId\\\":\\\"as2sCwq\\\"},\\\"bcc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"cc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"from\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"replyTo\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"headers\\\":{\\\"X-TEST-HEADER\\\":\\\"val\\\"},\\\"to\\\":[{\\\"email\\\":\\\"test@domena.pl\\\",\\\"name\\\":\\\"Test sender\\\",\\\"messageId\\\":\\\"test0001@domena.pl\\\",\\\"vars\\\":{\\\"test-var\\\":\\\"var-value\\\"}}],\\\"attachments\\\":[{\\\"fileName\\\":\\\"report.txt\\\",\\\"fileMime\\\":\\\"text/plain\\\",\\\"fileContent\\\":\\\"c29tZSBmaWxlIGNvbnRlbnQ=\\\"}]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"subject\\\":\\\"Test email subject\\\",\\\"smtpAccount\\\":\\\"1.test.smtp\\\",\\\"tags\\\":[\\\"test-tag\\\"],\\\"content\\\":{\\\"html\\\":\\\"<h1>Hello world</h1>\\\",\\\"text\\\":\\\"Hello world\\\",\\\"templateId\\\":\\\"as2sCwq\\\"},\\\"bcc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"cc\\\":[{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}],\\\"from\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"replyTo\\\":{\\\"email\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"},\\\"headers\\\":{\\\"X-TEST-HEADER\\\":\\\"val\\\"},\\\"to\\\":[{\\\"email\\\":\\\"test@domena.pl\\\",\\\"name\\\":\\\"Test sender\\\",\\\"messageId\\\":\\\"test0001@domena.pl\\\",\\\"vars\\\":{\\\"test-var\\\":\\\"var-value\\\"}}],\\\"attachments\\\":[{\\\"fileName\\\":\\\"report.txt\\\",\\\"fileMime\\\":\\\"text/plain\\\",\\\"fileContent\\\":\\\"c29tZSBmaWxlIGNvbnRlbnQ=\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"subject\":\"Test email subject\",\"smtpAccount\":\"1.test.smtp\",\"tags\":[\"test-tag\"],\"content\":{\"html\":\"<h1>Hello world</h1>\",\"text\":\"Hello world\",\"templateId\":\"as2sCwq\"},\"bcc\":[{\"email\":\"string\",\"name\":\"string\"}],\"cc\":[{\"email\":\"string\",\"name\":\"string\"}],\"from\":{\"email\":\"string\",\"name\":\"string\"},\"replyTo\":{\"email\":\"string\",\"name\":\"string\"},\"headers\":{\"X-TEST-HEADER\":\"val\"},\"to\":[{\"email\":\"test@domena.pl\",\"name\":\"Test sender\",\"messageId\":\"test0001@domena.pl\",\"vars\":{\"test-var\":\"var-value\"}}],\"attachments\":[{\"fileName\":\"report.txt\",\"fileMime\":\"text/plain\",\"fileContent\":\"c29tZSBmaWxlIGNvbnRlbnQ=\"}]}' |  \\\n  http POST https://api.redlink.pl/v2.1/email \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonext/plain\",\"fileContent\":\"c29tZSBmaWxlIGNvbnRlbnQ=\"}]}'"
          }
        ]
      }
    },
    "/v2.1/email/open": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Get email opens",
        "description": "Use this method to get details of email opens such as date, IP, browser, operation system and more. Please remember the opens are stored for 7 days.",
        "operationId": "GetOpens",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Search with date. The difference between dateTo and dateFrom cannot be more than 3 days.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Search with date. The difference between dateTo and dateFrom cannot be more than 3 days.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "$ref": "#/components/parameters/smtpAccount"
          },
          {
            "$ref": "#/components/parameters/messageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailOpen"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/open?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/open?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/email/open?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/email/open',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    dateTo: 'SOME_STRING_VALUE',\n    dateFrom: 'SOME_STRING_VALUE',\n    smtpAccount: 'SOME_STRING_VALUE',\n    messageId: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/open?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/open\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\",\"smtpAccount\":\"SOME_STRING_VALUE\",\"messageId\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/open?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/email/open?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&smtpAccount=SOME_STRING_VALUE&messageId=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/email/smtpAccount": {
      "options": {
        "tags": [
          "Emails"
        ],
        "summary": "Get smtp account list",
        "description": "Use this method to list details of the smtp account such as smtp name, smtp type and vps connected to your account.",
        "operationId": "GetSmtpAccounts",
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmtpAccount"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1",
          "fm_v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/email/smtpAccount\");\nvar request = new RestRequest(Method.OPTIONS);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/email/smtpAccount\"\n\n\treq, _ := http.NewRequest(\"OPTIONS\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.options(\"https://api.redlink.pl/v2.1/email/smtpAccount\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'OPTIONS',\n  url: 'https://api.redlink.pl/v2.1/email/smtpAccount',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/email/smtpAccount\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"OPTIONS\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/email/smtpAccount\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"OPTIONS\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/email/smtpAccount\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Options.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http OPTIONS https://api.redlink.pl/v2.1/email/smtpAccount \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/group/{groupId}/contact": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List contacts in group",
        "description": "Use this method to list all contacts in a group.",
        "operationId": "ListContactsInGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Allows you to select the field by which the sort should be performed. ( For this method: id, createdAt )",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id"
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "It allows you to set the sort order for a given field. ( ASC or DESC )",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id that should be searched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ShortContactObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    orderBy: 'SOME_STRING_VALUE',\n    orderDirection: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"orderBy\":\"SOME_STRING_VALUE\",\"orderDirection\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add contacts to group",
        "description": "Use this method to add contacts to a group.",
        "operationId": "AddContactToGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http POST https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete contacts from group",
        "description": "Use this method to delete contacts from a group.",
        "operationId": "DeleteContactFromGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http DELETE https://api.redlink.pl/v2.1/group/%7BgroupId%7D/contact \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      }
    },
    "/v2.1/group": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List groups",
        "description": "Use this method to list all created groups.",
        "operationId": "ListGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Specifies a required order for the query results. You can order only by id, createdAt and name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id"
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "Specifies the sort order. To sort the groups in descending order, use DESC to sort in ascending order, use ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupWithCreateDate"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/group?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/group',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    orderBy: 'SOME_STRING_VALUE',\n    orderDirection: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"orderBy\":\"SOME_STRING_VALUE\",\"orderDirection\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/group?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update group",
        "description": "Use this method to update a group.",
        "operationId": "UpdateGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id"
                ],
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupObject"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"id\\\":1234,\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\"}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group\"\n\n\tpayload := strings.NewReader(\"[{\\\"id\\\":1234,\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\"}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"https://api.redlink.pl/v2.1/group\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"[{\\\"id\\\":1234,\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\"}]\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PUT',\n  url: 'https://api.redlink.pl/v2.1/group',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: [{id: 1234, name: 'test', description: 'Test descr'}],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"[{\\\"id\\\":1234,\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\"}]\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group\"\n\npayload = \"[{\\\"id\\\":1234,\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\"}]\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"PUT\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"[{\\\"id\\\":1234,\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\"}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "curl --request PUT \\\n  --url https://api.redlink.pl/v2.1/group \\\n  --header 'application-key: REPLACE_KEY_VALUE' \\\n  --header 'authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '[{\"id\":1234,\"name\":\"test\",\"description\":\"Test descr\"}]'"
          }
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create group",
        "description": "Use this method to create a group that you can use to send email and sms campaigns.",
        "operationId": "CreateGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupObjectInput"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\",\\\"externalId\\\":\\\"XXXXX-XXXX-XXXX\\\"}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group\"\n\n\tpayload := strings.NewReader(\"[{\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\",\\\"externalId\\\":\\\"XXXXX-XXXX-XXXX\\\"}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/group\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"[{\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\",\\\"externalId\\\":\\\"XXXXX-XXXX-XXXX\\\"}]\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/group',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: [{name: 'test', description: 'Test descr', externalId: 'XXXXX-XXXX-XXXX'}],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"[{\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\",\\\"externalId\\\":\\\"XXXXX-XXXX-XXXX\\\"}]\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group\"\n\npayload = \"[{\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\",\\\"externalId\\\":\\\"XXXXX-XXXX-XXXX\\\"}]\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"[{\\\"name\\\":\\\"test\\\",\\\"description\\\":\\\"Test descr\\\",\\\"externalId\\\":\\\"XXXXX-XXXX-XXXX\\\"}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '[{\"name\":\"test\",\"description\":\"Test descr\",\"externalId\":\"XXXXX-XXXX-XXXX\"}]' |  \\\n  http POST https://api.redlink.pl/v2.1/group \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonription\":\"Test descr\",\"externalId\":\"XXXXX-XXXX-XXXX\"}]'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete group",
        "description": "Use this method to delete an existing group.",
        "operationId": "DeleteGroups",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":[1]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":[1]}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://api.redlink.pl/v2.1/group\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"id\\\":[1]}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://api.redlink.pl/v2.1/group',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {id: [1]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"id\\\":[1]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group\"\n\npayload = \"{\\\"id\\\":[1]}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"DELETE\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"id\\\":[1]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"id\":[1]}' |  \\\n  http DELETE https://api.redlink.pl/v2.1/group \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsoncontent-type: application/json' \\\n  --data '{\"id\":[1]}'"
          }
        ]
      }
    },
    "/v2.1/group/{groupId}/count": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Count number of contacts in group",
        "description": "Use this method to count number of contacts in group (either dynamic or static). When using this method for getting dynamic group count you may get response with Retry-After header. Please check chapter 'Long running actions - Retry-After header explained'.",
        "operationId": "CountContactsInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "int"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET https://api.redlink.pl/v2.1/group/%7BgroupId%7D/count \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/event": {
      "post": {
        "tags": [
          "Pushes"
        ],
        "summary": "Add event",
        "description": "Use this method to create a new event.",
        "operationId": "AddingEvents",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ConnectApiEventsInput"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/event\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"[{\\\"extId\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"eventName\\\":\\\"string\\\",\\\"userData\\\":{},\\\"additionalStringFields\\\":{\\\"some_field_name\\\":\\\"some_field_value\\\",\\\"some_field_name2\\\":\\\"some_field_value2\\\"},\\\"additionalBoolFields\\\":{\\\"some_bool_field\\\":true,\\\"some_bool_field2\\\":false},\\\"additionalNumericFields\\\":{\\\"some_numeric_field_name\\\":123,\\\"some_numeric_field_name2\\\":124},\\\"additionalDateFields\\\":{\\\"some_date_field_name\\\":1584112094}}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/event\"\n\n\tpayload := strings.NewReader(\"[{\\\"extId\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"eventName\\\":\\\"string\\\",\\\"userData\\\":{},\\\"additionalStringFields\\\":{\\\"some_field_name\\\":\\\"some_field_value\\\",\\\"some_field_name2\\\":\\\"some_field_value2\\\"},\\\"additionalBoolFields\\\":{\\\"some_bool_field\\\":true,\\\"some_bool_field2\\\":false},\\\"additionalNumericFields\\\":{\\\"some_numeric_field_name\\\":123,\\\"some_numeric_field_name2\\\":124},\\\"additionalDateFields\\\":{\\\"some_date_field_name\\\":1584112094}}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/event\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"[{\\\"extId\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"eventName\\\":\\\"string\\\",\\\"userData\\\":{},\\\"additionalStringFields\\\":{\\\"some_field_name\\\":\\\"some_field_value\\\",\\\"some_field_name2\\\":\\\"some_field_value2\\\"},\\\"additionalBoolFields\\\":{\\\"some_bool_field\\\":true,\\\"some_bool_field2\\\":false},\\\"additionalNumericFields\\\":{\\\"some_numeric_field_name\\\":123,\\\"some_numeric_field_name2\\\":124},\\\"additionalDateFields\\\":{\\\"some_date_field_name\\\":1584112094}}]\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/event',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: [\n    {\n      extId: 'string',\n      email: 'string',\n      number: 'string',\n      eventName: 'string',\n      userData: {},\n      additionalStringFields: {some_field_name: 'some_field_value', some_field_name2: 'some_field_value2'},\n      additionalBoolFields: {some_bool_field: true, some_bool_field2: false},\n      additionalNumericFields: {some_numeric_field_name: 123, some_numeric_field_name2: 124},\n      additionalDateFields: {some_date_field_name: 1584112094}\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/event\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"[{\\\"extId\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"eventName\\\":\\\"string\\\",\\\"userData\\\":{},\\\"additionalStringFields\\\":{\\\"some_field_name\\\":\\\"some_field_value\\\",\\\"some_field_name2\\\":\\\"some_field_value2\\\"},\\\"additionalBoolFields\\\":{\\\"some_bool_field\\\":true,\\\"some_bool_field2\\\":false},\\\"additionalNumericFields\\\":{\\\"some_numeric_field_name\\\":123,\\\"some_numeric_field_name2\\\":124},\\\"additionalDateFields\\\":{\\\"some_date_field_name\\\":1584112094}}]\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/event\"\n\npayload = \"[{\\\"extId\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"eventName\\\":\\\"string\\\",\\\"userData\\\":{},\\\"additionalStringFields\\\":{\\\"some_field_name\\\":\\\"some_field_value\\\",\\\"some_field_name2\\\":\\\"some_field_value2\\\"},\\\"additionalBoolFields\\\":{\\\"some_bool_field\\\":true,\\\"some_bool_field2\\\":false},\\\"additionalNumericFields\\\":{\\\"some_numeric_field_name\\\":123,\\\"some_numeric_field_name2\\\":124},\\\"additionalDateFields\\\":{\\\"some_date_field_name\\\":1584112094}}]\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/event\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"[{\\\"extId\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"number\\\":\\\"string\\\",\\\"eventName\\\":\\\"string\\\",\\\"userData\\\":{},\\\"additionalStringFields\\\":{\\\"some_field_name\\\":\\\"some_field_value\\\",\\\"some_field_name2\\\":\\\"some_field_value2\\\"},\\\"additionalBoolFields\\\":{\\\"some_bool_field\\\":true,\\\"some_bool_field2\\\":false},\\\"additionalNumericFields\\\":{\\\"some_numeric_field_name\\\":123,\\\"some_numeric_field_name2\\\":124},\\\"additionalDateFields\\\":{\\\"some_date_field_name\\\":1584112094}}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '[{\"extId\":\"string\",\"email\":\"string\",\"number\":\"string\",\"eventName\":\"string\",\"userData\":{},\"additionalStringFields\":{\"some_field_name\":\"some_field_value\",\"some_field_name2\":\"some_field_value2\"},\"additionalBoolFields\":{\"some_bool_field\":true,\"some_bool_field2\":false},\"additionalNumericFields\":{\"some_numeric_field_name\":123,\"some_numeric_field_name2\":124},\"additionalDateFields\":{\"some_date_field_name\":1584112094}}]' |  \\\n  http POST https://api.redlink.pl/v2.1/event \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonionalDateFields\":{\"some_date_field_name\":1584112094}}]'"
          }
        ]
      }
    },
    "/v2.1/sms/senders": {
      "options": {
        "tags": [
          "Sms"
        ],
        "summary": "Get list of sender IDs",
        "description": "Use the method to get all sender IDs assigned to the current API KEY.",
        "operationId": "GetSendersId",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/sms/senders\");\nvar request = new RestRequest(Method.OPTIONS);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/sms/senders\"\n\n\treq, _ := http.NewRequest(\"OPTIONS\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.options(\"https://api.redlink.pl/v2.1/sms/senders\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'OPTIONS',\n  url: 'https://api.redlink.pl/v2.1/sms/senders',\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/sms/senders\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"OPTIONS\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/sms/senders\"\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"OPTIONS\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/sms/senders\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Options.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http OPTIONS https://api.redlink.pl/v2.1/sms/senders \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/sms/{externalId}": {
      "get": {
        "tags": [
          "Sms"
        ],
        "summary": "Get list of SMS",
        "description": "Use this method to get all sms sent.",
        "operationId": "GetSmsListV2",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "externalId of SMS preceded by a sign 'C-' f.e. C-extid_3-0001",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sender",
            "in": "query",
            "description": "Allows to filtrate list of sent sms by sender id ( you can add up to 10 sender id separated by , )",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "Allows to find sent sms by phone number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "You can find sms by status ( 1 - new, 2 - move to send, 9 - rejected, 21 - delivered )",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "You can order by externalId, status and createTime. This only works if you don't pass the externalId parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "You can set ascending('ASC') or descending('DESC') direction. This only works if you don't pass the externalId parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Start of the time range.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "End of the time range.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD hh:mm:ii"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/sms/%7BexternalId%7D?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&sender=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&status=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/sms/%7BexternalId%7D?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&sender=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&status=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"https://api.redlink.pl/v2.1/sms/%7BexternalId%7D?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&sender=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&status=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.redlink.pl/v2.1/sms/%7BexternalId%7D',\n  qs: {\n    offset: 'SOME_INTEGER_VALUE',\n    limit: 'SOME_INTEGER_VALUE',\n    sender: 'SOME_STRING_VALUE',\n    phoneNumber: 'SOME_STRING_VALUE',\n    status: 'SOME_INTEGER_VALUE',\n    orderBy: 'SOME_STRING_VALUE',\n    orderDirection: 'SOME_STRING_VALUE',\n    dateTo: 'SOME_STRING_VALUE',\n    dateFrom: 'SOME_STRING_VALUE'\n  },\n  headers: {authorization: 'REPLACE_KEY_VALUE', 'application-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/sms/%7BexternalId%7D?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&sender=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&status=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/sms/%7BexternalId%7D\"\n\nquerystring = {\"offset\":\"SOME_INTEGER_VALUE\",\"limit\":\"SOME_INTEGER_VALUE\",\"sender\":\"SOME_STRING_VALUE\",\"phoneNumber\":\"SOME_STRING_VALUE\",\"status\":\"SOME_INTEGER_VALUE\",\"orderBy\":\"SOME_STRING_VALUE\",\"orderDirection\":\"SOME_STRING_VALUE\",\"dateTo\":\"SOME_STRING_VALUE\",\"dateFrom\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/sms/%7BexternalId%7D?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&sender=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&status=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "http GET 'https://api.redlink.pl/v2.1/sms/%7BexternalId%7D?offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE&sender=SOME_STRING_VALUE&phoneNumber=SOME_STRING_VALUE&status=SOME_INTEGER_VALUE&orderBy=SOME_STRING_VALUE&orderDirection=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE' \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE --header 'authorization: REPLACE_KEY_VALUE'"
          }
        ]
      }
    },
    "/v2.1/sms/hlr": {
      "post": {
        "tags": [
          "Sms"
        ],
        "summary": "Hlr",
        "description": "Use this method to check if a phone number is available.",
        "operationId": "Hlr",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HLRInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HlrObject"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/sms/hlr\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"phone\\\":\\\"+48111222333\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/sms/hlr\"\n\n\tpayload := strings.NewReader(\"{\\\"phone\\\":\\\"+48111222333\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/sms/hlr\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"phone\\\":\\\"+48111222333\\\"}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/sms/hlr',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {phone: '+48111222333'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/sms/hlr\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"phone\\\":\\\"+48111222333\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/sms/hlr\"\n\npayload = \"{\\\"phone\\\":\\\"+48111222333\\\"}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/sms/hlr\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"phone\\\":\\\"+48111222333\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"phone\":\"+48111222333\"}' |  \\\n  http POST https://api.redlink.pl/v2.1/sms/hlr \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonapplication/json' \\\n  --data '{\"phone\":\"+48111222333\"}'"
          }
        ]
      }
    },
    "/v2.1/sms": {
      "post": {
        "tags": [
          "Sms"
        ],
        "summary": "Send SMS",
        "description": "Use this method to send SMS to any phone numbers you provide. If you want to send SMS to the group created through POST /v2/group use the send sms campaign method. Remember that the use of characters other than the GSM-7 standard will shorten individual text messages, which may increase the cost of sending messages. If You want more information, check SMS Billing section in this documentation.",
        "operationId": "SendSmsV2",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsInputV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request was successfully processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/MetaObject"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SmsObjectV2"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/sms\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"sender\\\":\\\"string\\\",\\\"message\\\":\\\"Hello world!\\\",\\\"phoneNumbers\\\":[\\\"+48111222333\\\",\\\"+48111222444\\\"],\\\"validity\\\":0,\\\"scheduleTime\\\":0,\\\"type\\\":0,\\\"shortLink\\\":true,\\\"webhookUrl\\\":\\\"string\\\",\\\"externalId\\\":\\\"xxxx-xxxx-xxxx\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/sms\"\n\n\tpayload := strings.NewReader(\"{\\\"sender\\\":\\\"string\\\",\\\"message\\\":\\\"Hello world!\\\",\\\"phoneNumbers\\\":[\\\"+48111222333\\\",\\\"+48111222444\\\"],\\\"validity\\\":0,\\\"scheduleTime\\\":0,\\\"type\\\":0,\\\"shortLink\\\":true,\\\"webhookUrl\\\":\\\"string\\\",\\\"externalId\\\":\\\"xxxx-xxxx-xxxx\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/sms\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"sender\\\":\\\"string\\\",\\\"message\\\":\\\"Hello world!\\\",\\\"phoneNumbers\\\":[\\\"+48111222333\\\",\\\"+48111222444\\\"],\\\"validity\\\":0,\\\"scheduleTime\\\":0,\\\"type\\\":0,\\\"shortLink\\\":true,\\\"webhookUrl\\\":\\\"string\\\",\\\"externalId\\\":\\\"xxxx-xxxx-xxxx\\\"}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/sms',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    sender: 'string',\n    message: 'Hello world!',\n    phoneNumbers: ['+48111222333', '+48111222444'],\n    validity: 0,\n    scheduleTime: 0,\n    type: 0,\n    shortLink: true,\n    webhookUrl: 'string',\n    externalId: 'xxxx-xxxx-xxxx'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/sms\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"sender\\\":\\\"string\\\",\\\"message\\\":\\\"Hello world!\\\",\\\"phoneNumbers\\\":[\\\"+48111222333\\\",\\\"+48111222444\\\"],\\\"validity\\\":0,\\\"scheduleTime\\\":0,\\\"type\\\":0,\\\"shortLink\\\":true,\\\"webhookUrl\\\":\\\"string\\\",\\\"externalId\\\":\\\"xxxx-xxxx-xxxx\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/sms\"\n\npayload = \"{\\\"sender\\\":\\\"string\\\",\\\"message\\\":\\\"Hello world!\\\",\\\"phoneNumbers\\\":[\\\"+48111222333\\\",\\\"+48111222444\\\"],\\\"validity\\\":0,\\\"scheduleTime\\\":0,\\\"type\\\":0,\\\"shortLink\\\":true,\\\"webhookUrl\\\":\\\"string\\\",\\\"externalId\\\":\\\"xxxx-xxxx-xxxx\\\"}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/sms\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"sender\\\":\\\"string\\\",\\\"message\\\":\\\"Hello world!\\\",\\\"phoneNumbers\\\":[\\\"+48111222333\\\",\\\"+48111222444\\\"],\\\"validity\\\":0,\\\"scheduleTime\\\":0,\\\"type\\\":0,\\\"shortLink\\\":true,\\\"webhookUrl\\\":\\\"string\\\",\\\"externalId\\\":\\\"xxxx-xxxx-xxxx\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"sender\":\"string\",\"message\":\"Hello world!\",\"phoneNumbers\":[\"+48111222333\",\"+48111222444\"],\"validity\":0,\"scheduleTime\":0,\"type\":0,\"shortLink\":true,\"webhookUrl\":\"string\",\"externalId\":\"xxxx-xxxx-xxxx\"}' |  \\\n  http POST https://api.redlink.pl/v2.1/sms \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsone,\"webhookUrl\":\"string\",\"externalId\":\"xxxx-xxxx-xxxx\"}'"
          }
        ]
      }
    },
    "/v2.1/scenario/trigger": {
      "post": {
        "tags": [
          "Automation"
        ],
        "summary": "Triggering scenario",
        "description": "Action allows to trigger scenario previously created in redlink panel.",
        "operationId": "TriggerScenario",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerScenarioBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/onlyMeta200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-apiVersions": [
          "v1",
          "v2",
          "v2.1"
        ],
        "x-code-samples": [
          {
            "lang": "Csharp",
            "source": "var client = new RestClient(\"https://api.redlink.pl/v2.1/scenario/trigger\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"REPLACE_KEY_VALUE\");\nrequest.AddHeader(\"application-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"scenarioId\\\":\\\"XXXXXX-XXXXX-XXXXX-XXXXX\\\",\\\"recipientEmail\\\":\\\"test@test.pl\\\",\\\"recipientMobileNumber\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.redlink.pl/v2.1/scenario/trigger\"\n\n\tpayload := strings.NewReader(\"{\\\"scenarioId\\\":\\\"XXXXXX-XXXXX-XXXXX-XXXXX\\\",\\\"recipientEmail\\\":\\\"test@test.pl\\\",\\\"recipientMobileNumber\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"REPLACE_KEY_VALUE\")\n\treq.Header.Add(\"application-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"https://api.redlink.pl/v2.1/scenario/trigger\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"REPLACE_KEY_VALUE\")\n  .header(\"application-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"scenarioId\\\":\\\"XXXXXX-XXXXX-XXXXX-XXXXX\\\",\\\"recipientEmail\\\":\\\"test@test.pl\\\",\\\"recipientMobileNumber\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "Node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.redlink.pl/v2.1/scenario/trigger',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'REPLACE_KEY_VALUE',\n    'application-key': 'REPLACE_KEY_VALUE'\n  },\n  body: {\n    scenarioId: 'XXXXXX-XXXXX-XXXXX-XXXXX',\n    recipientEmail: 'test@test.pl',\n    recipientMobileNumber: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://api.redlink.pl/v2.1/scenario/trigger\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"scenarioId\\\":\\\"XXXXXX-XXXXX-XXXXX-XXXXX\\\",\\\"recipientEmail\\\":\\\"test@test.pl\\\",\\\"recipientMobileNumber\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"application-key: REPLACE_KEY_VALUE\",\n    \"authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.redlink.pl/v2.1/scenario/trigger\"\n\npayload = \"{\\\"scenarioId\\\":\\\"XXXXXX-XXXXX-XXXXX-XXXXX\\\",\\\"recipientEmail\\\":\\\"test@test.pl\\\",\\\"recipientMobileNumber\\\":\\\"string\\\"}\"\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"REPLACE_KEY_VALUE\",\n    'application-key': \"REPLACE_KEY_VALUE\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.redlink.pl/v2.1/scenario/trigger\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'REPLACE_KEY_VALUE'\nrequest[\"application-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"scenarioId\\\":\\\"XXXXXX-XXXXX-XXXXX-XXXXX\\\",\\\"recipientEmail\\\":\\\"test@test.pl\\\",\\\"recipientMobileNumber\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell",
            "source": "echo '{\"scenarioId\":\"XXXXXX-XXXXX-XXXXX-XXXXX\",\"recipientEmail\":\"test@test.pl\",\"recipientMobileNumber\":\"string\"}' |  \\\n  http POST https://api.redlink.pl/v2.1/scenario/trigger \\\n  application-key:REPLACE_KEY_VALUE \\\n  authorization:REPLACE_KEY_VALUE \\\n  content-type:application/jsonmail\":\"test@test.pl\",\"recipientMobileNumber\":\"string\"}'"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorObject": {
        "description": "Errors list",
        "required": [
          "title",
          "message",
          "code"
        ],
        "properties": {
          "title": {
            "description": "General error name",
            "type": "string",
            "example": "ValidationError"
          },
          "message": {
            "description": "Error details",
            "type": "string",
            "example": "Field ... is invalid"
          },
          "code": {
            "description": "Error code in our system",
            "type": "string",
            "example": "E-01-01"
          }
        },
        "type": "object"
      },
      "SmsCampaign": {
        "description": "Sms campaign object",
        "properties": {
          "externalId": {
            "type": "string",
            "example": "example-id"
          },
          "name": {
            "type": "string",
            "example": "test"
          },
          "description": {
            "type": "string",
            "example": "test descr"
          },
          "message": {
            "type": "string",
            "example": "Hello world"
          },
          "senderId": {
            "type": "string",
            "example": "TEST"
          },
          "groupId": {
            "type": "string",
            "example": "test-group-id"
          },
          "scheduleTime": {
            "type": "string",
            "example": "2020-09-10 10:15:00"
          },
          "api": {
            "type": "string",
            "example": "1"
          }
        },
        "type": "object"
      },
      "ContactObjectUpdate": {
        "description": "One of the following parameters is required when adding contact: email, phoneNumber",
        "properties": {
          "companyName": {
            "description": "The company name.",
            "type": "string",
            "maxLength": 150,
            "example": "Example company"
          },
          "email": {
            "description": "The valid email address.",
            "type": "string",
            "maxLength": 150,
            "example": "test@test.pl"
          },
          "externalId": {
            "description": "The unique identifier of the contact.",
            "type": "string",
            "maxLength": 150,
            "example": "XXX-XXX-XXX"
          },
          "firstName": {
            "description": "Contact’s name.",
            "type": "string",
            "maxLength": 150,
            "example": "First name"
          },
          "id": {
            "description": "Contact id",
            "type": "string",
            "maxLength": 150,
            "readOnly": true,
            "example": "1"
          },
          "lastName": {
            "description": "Contact’s last name.",
            "type": "string",
            "maxLength": 150,
            "example": "Last name"
          },
          "phoneNumber": {
            "description": "Contact’s phone number.",
            "type": "string",
            "maxLength": 15,
            "pattern": "/^\\+?[0-9]+$/",
            "example": "123123123"
          },
          "externalData": {
            "description": "Object with any additional parameters. <br>\n     *                           Contains key value pairs where key max length is 100 characters. <br>\n     *                           Value can beone of the following types: string, int, bool, date (in YYYY-MM-DD hh:mm:ii format)",
            "type": "object",
            "example": {
              "test": "test",
              "createdAt": "1989-09-28",
              "isClient": false
            },
            "additionalProperties": true
          },
          "inArchive": {
            "description": "Is contact archivized, field added in version v1.1",
            "type": "bool",
            "readOnly": true,
            "example": "false"
          }
        },
        "type": "object"
      },
      "ContactObject": {
        "description": "One of the following parameters is required when adding contact: email, phoneNumber",
        "properties": {
          "companyName": {
            "description": "The company name.",
            "type": "string",
            "maxLength": 150,
            "example": "Example company"
          },
          "createdAt": {
            "description": "The date of creation contact.",
            "type": "string",
            "maxLength": 150,
            "pattern": "^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s*(?:\\\\d{2}:\\\\d{2}(?::\\\\d{2})?)?$",
            "example": "2019-02-01 20:12:12"
          },
          "email": {
            "description": "The valid email address.",
            "type": "string",
            "maxLength": 150,
            "example": "test@test.pl"
          },
          "externalId": {
            "description": "The unique identifier of the contact.",
            "type": "string",
            "maxLength": 150,
            "example": "XXX-XXX-XXX"
          },
          "firstName": {
            "description": "Contact’s name.",
            "type": "string",
            "maxLength": 150,
            "example": "First name"
          },
          "id": {
            "description": "Contact id",
            "type": "string",
            "maxLength": 150,
            "readOnly": true,
            "example": "1"
          },
          "lastName": {
            "description": "Contact’s last name.",
            "type": "string",
            "maxLength": 150,
            "example": "Last name"
          },
          "phoneNumber": {
            "description": "Contact’s phone number.",
            "type": "string",
            "maxLength": 15,
            "pattern": "/^\\+?[0-9]+$/",
            "example": "123123123"
          },
          "externalData": {
            "description": "Object with any additional parameters. <br>\n     *                           Contains key value pairs where key max length is 100 characters. <br>\n     *                           Value can beone of the following types: string, int, bool, date (in YYYY-MM-DD hh:mm:ii format)",
            "type": "object",
            "example": {
              "test": "test",
              "createdAt": "1989-09-28",
              "isClient": false
            },
            "additionalProperties": true
          },
          "inArchive": {
            "description": "Is contact archivized, field added in version v1.1",
            "type": "bool",
            "readOnly": true,
            "example": "false"
          }
        },
        "type": "object"
      },
      "ContactObjectV2": {
        "description": "One of the following parameters is required when adding contact: email, phoneNumber",
        "properties": {
          "companyName": {
            "description": "The company name.",
            "type": "string",
            "maxLength": 150,
            "example": "Example company"
          },
          "createdAt": {
            "description": "The date of creation contact.",
            "type": "string",
            "maxLength": 150,
            "pattern": "^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s*(?:\\\\d{2}:\\\\d{2}(?::\\\\d{2})?)?$",
            "example": "2019-02-01 20:12:12"
          },
          "email": {
            "description": "The valid email address.",
            "type": "string",
            "maxLength": 150,
            "example": "test@test.pl"
          },
          "externalId": {
            "description": "The unique identifier of the contact.",
            "type": "string",
            "maxLength": 150,
            "example": "XXX-XXX-XXX"
          },
          "firstName": {
            "description": "Contact’s name.",
            "type": "string",
            "maxLength": 150,
            "example": "First name"
          },
          "id": {
            "description": "Contact id",
            "type": "string",
            "maxLength": 150,
            "readOnly": true,
            "example": "1"
          },
          "lastName": {
            "description": "Contact’s last name.",
            "type": "string",
            "maxLength": 150,
            "example": "Last name"
          },
          "phoneNumber": {
            "description": "Contact’s phone number.",
            "type": "string",
            "maxLength": 15,
            "pattern": "/^\\+?[0-9]+$/",
            "example": "123123123"
          },
          "externalData": {
            "description": "Object with any additional parameters. <br>\n     *                           Contains key value pairs where key max length is 100 characters. <br>\n     *                           Value can beone of the following types: string, int, bool, date (in YYYY-MM-DD hh:mm:ii format)",
            "type": "object",
            "example": {
              "test": "test",
              "createdAt": "1989-09-28",
              "isClient": false
            },
            "additionalProperties": true
          },
          "inArchive": {
            "description": "Is contact archivized, field added in version v1.1",
            "type": "bool",
            "readOnly": true,
            "example": "false"
          },
          "unsubscribeAllReason": {
            "description": "Unsubscribe reason. (1 - spam, 2 - unregistered, 3 - doesnotexisits, 4 - other)",
            "type": "string",
            "maxLength": 150,
            "example": "Last name"
          },
          "unsubscribeAllTime": {
            "description": "Last action date. Unsubscribe or resubscribe all channels date.",
            "type": "string",
            "maxLength": 150,
            "pattern": "^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s*(?:\\\\d{2}:\\\\d{2}(?::\\\\d{2})?)?$",
            "example": "2019-02-01 20:12:12"
          },
          "unsubscribePushTime": {
            "description": "Last action date. Unsubscribe or resubscribe push channel date.",
            "type": "string",
            "maxLength": 150,
            "pattern": "^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s*(?:\\\\d{2}:\\\\d{2}(?::\\\\d{2})?)?$",
            "example": "2019-02-01 20:12:12"
          },
          "unsubscribeEmailTime": {
            "description": "Last action date. Unsubscribe or resubscribe email channel date.",
            "type": "string",
            "maxLength": 150,
            "pattern": "^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s*(?:\\\\d{2}:\\\\d{2}(?::\\\\d{2})?)?$",
            "example": "2019-02-01 20:12:12"
          },
          "unsubscribeSmsTime": {
            "description": "Last action date. Unsubscribe or resubscribe sms channel date.",
            "type": "string",
            "maxLength": 150,
            "pattern": "^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s*(?:\\\\d{2}:\\\\d{2}(?::\\\\d{2})?)?$",
            "example": "2019-02-01 20:12:12"
          },
          "isUnsubscribeSms": {
            "description": "Is contact unsubscribed in sms channel",
            "type": "bool",
            "readOnly": true,
            "example": "false"
          },
          "isUnsubscribeEmail": {
            "description": "Is contact unsubscribed in email channel",
            "type": "bool",
            "readOnly": true,
            "example": "false"
          },
          "isUnsubscribePush": {
            "description": "Is contact unsubscribed in push channel",
            "type": "bool",
            "readOnly": true,
            "example": "false"
          }
        },
        "type": "object"
      },
      "IdInput": {
        "description": "The id of a object",
        "properties": {
          "id": {
            "description": "The id of a object",
            "type": "array",
            "items": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "type": "object"
      },
      "ExtIdInput": {
        "description": "The external id of a object",
        "properties": {
          "id": {
            "description": "The external id of a object",
            "type": "array",
            "items": {
              "type": "string",
              "example": "XXX-XXX"
            }
          }
        },
        "type": "object"
      },
      "ExtIdInputTemplates": {
        "properties": {
          "externalId": {
            "description": "The unique ID of the template.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "XXX-XXX"
            }
          }
        },
        "type": "object"
      },
      "DataObject": {
        "description": "Simple data object",
        "type": "array",
        "items": {}
      },
      "ShortContactObject": {
        "properties": {
          "email": {
            "type": "string",
            "example": "test@test.pl"
          },
          "externalId": {
            "type": "string",
            "example": "XXXX-XXXXX-XXXX"
          },
          "id": {
            "type": "string",
            "example": "123"
          },
          "phoneNumber": {
            "type": "string",
            "example": "0123123123"
          }
        },
        "type": "object"
      },
      "MetaObject": {
        "description": "Additional data",
        "required": [
          "numberOfErrors",
          "numberOfData",
          "status",
          "uniqId"
        ],
        "properties": {
          "numberOfErrors": {
            "description": "Number of items in errors section, 0 if section not exists",
            "type": "integer",
            "example": 0
          },
          "numberOfData": {
            "description": "Number of items in data section, 0 if section not exists",
            "type": "integer",
            "example": 1
          },
          "status": {
            "description": "Request HTTP status",
            "type": "integer",
            "example": 200
          },
          "uniqId": {
            "description": "Unique identifier of a request - it allows us to find your request in the case of any troubles",
            "type": "string",
            "example": "00d928f759"
          }
        },
        "type": "object"
      },
      "GroupObjectInput": {
        "description": "Group object",
        "properties": {
          "name": {
            "description": "The group name.",
            "type": "string",
            "example": "test"
          },
          "description": {
            "description": "The group description.",
            "type": "string",
            "example": "Test descr"
          },
          "externalId": {
            "description": "The unique identifier of the group",
            "type": "string",
            "example": "XXXXX-XXXX-XXXX"
          }
        },
        "type": "object"
      },
      "GroupObject": {
        "description": "Group object",
        "properties": {
          "id": {
            "description": "The id of the group.",
            "type": "integer",
            "example": 1234
          },
          "name": {
            "description": "The unique name of the group.",
            "type": "string",
            "example": "test"
          },
          "description": {
            "description": "The group description.",
            "type": "string",
            "example": "Test descr"
          }
        },
        "type": "object"
      },
      "EmailStatusObject": {
        "properties": {
          "subject": {
            "type": "string"
          },
          "smtpAccount": {
            "description": "SMTP account",
            "type": "string",
            "example": "1.test.smtp"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "to": {
            "type": "array",
            "items": {
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test@domena.pl"
                },
                "name": {
                  "type": "string",
                  "example": "Test sender"
                },
                "messageId": {
                  "type": "string",
                  "example": "test0001@domena.pl"
                }
              },
              "type": "object"
            }
          },
          "from": {
            "properties": {
              "email": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "statusTime": {
            "type": "number"
          },
          "statusDesc": {
            "type": "string"
          },
          "allStatuses": {
            "type": "array",
            "items": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "statusTime": {
                  "type": "integer"
                },
                "statusDesc": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "EmailObject": {
        "description": "Object passed when sending emails. ",
        "properties": {
          "subject": {
            "description": "The subject of the message.",
            "type": "string",
            "example": "Test email subject"
          },
          "smtpAccount": {
            "description": "The smtp account name the email will be sent from.",
            "type": "string",
            "example": "1.test.smtp"
          },
          "tags": {
            "description": "The values to tag the message with. Tags can be non-unique.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "test-tag"
            }
          },
          "content": {
            "description": "The body of the message. If you choose templateId html and text can be omitted.",
            "properties": {
              "html": {
                "description": "The html of the message.",
                "type": "string",
                "example": "<h1>Hello world</h1>"
              },
              "text": {
                "description": "The text of the message.",
                "type": "string",
                "example": "Hello world"
              },
              "templateId": {
                "description": "The unique ID of the template you can find it using Get templates list method.",
                "type": "string",
                "example": "as2sCwq"
              }
            },
            "type": "object"
          },
          "bcc": {
            "description": "The array of recipients who will receive a blind carbon copy of your email.",
            "type": "array",
            "items": {
              "properties": {
                "email": {
                  "description": "The email address of the recipient.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the recipient.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "cc": {
            "description": "The array of recipients who will receive a copy of your email.",
            "type": "array",
            "items": {
              "properties": {
                "email": {
                  "description": "The email address of the recipient.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the recipient.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "from": {
            "description": "The details of sender.",
            "properties": {
              "email": {
                "description": "The email address of the sender.",
                "type": "string"
              },
              "name": {
                "description": "The name of the sender.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "replyTo": {
            "description": "The details of who the recipient can reply to.",
            "properties": {
              "email": {
                "description": "The email address to reply to.",
                "type": "string"
              },
              "name": {
                "description": "The name of the email address to reply to.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "headers": {
            "description": "The extra key/value pair of the headers you can add to the message. Property name can contain max of 100 signs.",
            "type": "object",
            "example": {
              "X-TEST-HEADER": "val"
            },
            "additionalProperties": true
          },
          "to": {
            "description": "The details of the recipients.",
            "type": "array",
            "items": {
              "properties": {
                "email": {
                  "description": "The email address of the recipient.",
                  "type": "string",
                  "example": "test@domena.pl"
                },
                "name": {
                  "description": "The name of the recipient.",
                  "type": "string",
                  "example": "Test sender"
                },
                "messageId": {
                  "description": "The unique ID of the message.",
                  "type": "string",
                  "example": "test0001@domena.pl"
                },
                "vars": {
                  "description": "The extra key/value pair of variables you can add and use in the message.",
                  "type": "object",
                  "example": {
                    "test-var": "var-value"
                  }
                }
              },
              "type": "object"
            }
          },
          "attachments": {
            "description": "The details of the attachments. The entire query should not exceed 10 MB.",
            "type": "array",
            "items": {
              "properties": {
                "fileName": {
                  "description": "Name of the file.",
                  "type": "string",
                  "example": "report.txt"
                },
                "fileMime": {
                  "description": "Type of file.",
                  "type": "string",
                  "example": "text/plain"
                },
                "fileContent": {
                  "description": "File content in encoding base64.",
                  "type": "string",
                  "example": "c29tZSBmaWxlIGNvbnRlbnQ="
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "Blacklist": {
        "properties": {
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "smtpAccount": {
            "description": "SMTP account",
            "type": "string"
          },
          "reason": {
            "description": "Reason for adding to the blacklist ( from: /email/blacklist/reason )",
            "type": "string"
          },
          "comment": {
            "description": "Comment on the entry",
            "type": "string"
          },
          "counter": {
            "description": "Number of bounces",
            "type": "string"
          },
          "createdAt": {
            "description": "Date of creation",
            "type": "integer"
          },
          "updatedAt": {
            "description": "Last update date",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BlacklistDomain": {
        "description": "The domain you want to use in action.",
        "properties": {
          "domain": {
            "description": "string Domain"
          }
        },
        "type": "object"
      },
      "EmailCampaignClick": {
        "description": "Email campaign click object",
        "properties": {
          "link": {
            "type": "string"
          },
          "clickTime": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          },
          "campaignId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailCampaign": {
        "description": "Email campaign object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "fromName": {
            "type": "string"
          },
          "fromAddress": {
            "type": "string"
          },
          "replyTo": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "scheduleTime": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailCampaignOpen": {
        "description": "Email campaign open object",
        "properties": {
          "readReportTime": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "campaignId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailCampaignsRecipient": {
        "description": "Email campaign recipient object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PushCampaignsRecipient": {
        "description": "Push campaign recipient object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "receivedTime": {
            "type": "string"
          },
          "resultCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailCampaignsStateReport": {
        "description": "Email campaign state object",
        "properties": {
          "state": {
            "type": "string",
            "example": "sent"
          }
        },
        "type": "object"
      },
      "RunnableEmailCampaignOutputObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailCampaign"
          },
          {
            "$ref": "#/components/schemas/EmailCampaignsStateReport"
          }
        ]
      },
      "SingleSmsCampaign": {
        "description": "Sms campaign click object",
        "properties": {
          "campaignId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "senderId": {
            "type": "string"
          },
          "priority": {
            "type": "boolean"
          },
          "recipientsCount": {
            "type": "integer"
          },
          "unicode": {
            "type": "boolean"
          },
          "validity": {
            "type": "integer"
          },
          "flash": {
            "type": "boolean"
          },
          "trackLinks": {
            "type": "boolean"
          },
          "scheduleTime": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SmsCampaignClick": {
        "description": "Sms campaign click object",
        "properties": {
          "link": {
            "type": "string"
          },
          "clickTime": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SmsCampaignsRecipient": {
        "description": "Sms campaign recipient object",
        "properties": {
          "number": {
            "type": "string"
          },
          "receivedTime": {
            "type": "string"
          },
          "resultCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SmsCampaignsStateReport": {
        "description": "Sms campaign state object",
        "properties": {
          "state": {
            "type": "string",
            "example": "sent"
          }
        },
        "type": "object"
      },
      "PushResponseObject": {
        "required": [
          "receiver",
          "type"
        ],
        "properties": {
          "receiver": {
            "description": "Receiver device-id, email or phone number.",
            "type": "string",
            "example": "example-device-id"
          },
          "externalId": {
            "description": "Custom id. Globally unique!",
            "type": "string",
            "example": "xxx-xxx-xxx-xxx"
          },
          "type": {
            "description": "Type of receiver value. Enum values:\n\n    1 - DEVICE_RECEIVER,\n    2 - EMAIL_RECEIVER,\n    3 - NUMBER_RECEIVER\n\n    ",
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ],
            "example": 1
          }
        },
        "type": "object"
      },
      "AddContactInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactObject"
          },
          {
            "properties": {
              "addToGroup": {
                "description": "The list which tells us to what groups we should add client,note that this field\n     *                       will be available only when addingcontact.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateContactInput": {
        "oneOf": [
          {
            "properties": {
              "externalId": {
                "description": "The externalId of contact that will be updated.",
                "type": "string",
                "example": "bfa0b1b1-e636-b8ab-aba4-78a913be0144"
              },
              "data": {
                "type": "object",
                "$ref": "#/components/schemas/ContactObjectUpdate"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "id": {
                "description": "The id of contact that will be updated.",
                "type": "string",
                "example": 1
              },
              "data": {
                "type": "object",
                "$ref": "#/components/schemas/ContactObjectUpdate"
              }
            },
            "type": "object"
          }
        ]
      },
      "AdditionalField": {
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "fieldType": {
            "description": "Available types: string, datetime, number, boolean",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Segment": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdTime": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "SegmentCount": {
        "properties": {
          "count": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "TemplateObject": {
        "properties": {
          "html": {
            "description": "The HTML content of your message.",
            "type": "string"
          },
          "text": {
            "description": "The plain text content of your message.",
            "type": "string"
          },
          "name": {
            "description": "The name of the new template.",
            "type": "string"
          },
          "externalId": {
            "description": "The unique ID of the new template. If you won’t add it the externalId will be generated in the response.",
            "type": "string"
          },
          "smtpAccount": {
            "description": "The name of your smtp account you want the new template to be saved on.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailClick": {
        "properties": {
          "messageId": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "smtpAccount": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TemplateObjectWithTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateObject"
          },
          {
            "properties": {
              "createdAt": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "EmailOpen": {
        "properties": {
          "messageId": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "smtpAccount": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SmtpAccount": {
        "properties": {
          "smtpAccount": {
            "type": "string"
          },
          "smtpName": {
            "type": "string"
          },
          "smtpType": {
            "type": "string"
          },
          "vps": {
            "type": "array",
            "items": {
              "properties": {
                "vpsName": {
                  "type": "string"
                },
                "host": {
                  "type": "string"
                },
                "vpsType": {
                  "type": "string"
                },
                "ip": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GroupWithCreateDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupObject"
          },
          {
            "properties": {
              "createdAt": {
                "description": "Unix timestamp",
                "type": "number"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConnectApiEventsInput": {
        "properties": {
          "extId": {
            "description": "ExternalId of contact.",
            "type": "string"
          },
          "email": {
            "description": "Valid email address.",
            "type": "string"
          },
          "number": {
            "description": "Phone number in format +48XXXXXXXXX.",
            "type": "string"
          },
          "eventName": {
            "description": "Name of the event.",
            "type": "string"
          },
          "userData": {
            "description": "Field with non standard values.",
            "type": "object"
          },
          "additionalStringFields": {
            "description": "Additional fields with string type values.",
            "example": {
              "some_field_name": "some_field_value",
              "some_field_name2": "some_field_value2"
            },
            "additionalProperties": true
          },
          "additionalBoolFields": {
            "description": "Additional fields with bool type values.",
            "example": {
              "some_bool_field": true,
              "some_bool_field2": false
            },
            "additionalProperties": true
          },
          "additionalNumericFields": {
            "description": "Additional fields with numeric type values.",
            "example": {
              "some_numeric_field_name": 123,
              "some_numeric_field_name2": 124
            },
            "additionalProperties": true
          },
          "additionalDateFields": {
            "description": "Additional fields with date type values. Date should be unix timestamp.",
            "example": {
              "some_date_field_name": 1584112094
            },
            "additionalProperties": true
          }
        },
        "type": "object"
      },
      "HLRInput": {
        "required": [
          "phone"
        ],
        "properties": {
          "phone": {
            "description": "The phone number.",
            "type": "string",
            "example": "+48111222333"
          }
        },
        "type": "object"
      },
      "SmsInput": {
        "required": [
          "sender",
          "phoneNumbers",
          "message"
        ],
        "properties": {
          "sender": {
            "description": "The sender ID that was previously added through the user panel and then accepted by our support team.",
            "type": "string",
            "maxLength": 20
          },
          "message": {
            "description": "The content of the SMS",
            "type": "string",
            "example": "Hello world!"
          },
          "phoneNumbers": {
            "description": "The phone numbers of receivers.",
            "type": "string/array",
            "example": [
              "+48111222333",
              "+48222333444"
            ]
          },
          "validity": {
            "description": "The number of minutes the SMS will be valid (Max value = 4320) / 3 days",
            "type": "number",
            "maximum": 4320
          },
          "scheduleTime": {
            "description": "Date the message was sent. Maximum in 14 days. UnixTimeStamp in UTC timezone.",
            "type": "number"
          },
          "type": {
            "description": "Type of SMS ( 0 - regular SMS, 1 - Flash SMS )",
            "type": "number",
            "default": 0
          },
          "shortLink": {
            "description": "The URL shortener and tracker. Setting this property to ‘true’ will make the urls shorter and also urls will be tracked.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "webhookUrl": {
            "description": "The URL for DLR (Delivery Report).  DLR is a feature that reports if the message has been delivered. If you want more inforations check section DLR in this documentation.",
            "type": "string"
          },
          "externalId": {
            "description": "The unique identifier of the message. After sending a text message with external ID, it cannot be resent for next 24 hours.",
            "type": "string",
            "example": "xxxx-xxxx-xxxx"
          }
        },
        "type": "object"
      },
      "SmsInputV2": {
        "required": [
          "sender",
          "phoneNumbers",
          "message"
        ],
        "properties": {
          "sender": {
            "description": "The sender ID that was previously added through the user panel and then accepted by our support team.",
            "type": "string",
            "maxLength": 20
          },
          "message": {
            "description": "The content of the SMS",
            "type": "string",
            "example": "Hello world!"
          },
          "phoneNumbers": {
            "description": "The phone numbers of receivers.",
            "type": "string/array",
            "example": [
              "+48111222333",
              "+48111222444"
            ]
          },
          "validity": {
            "description": "The number of minutes the SMS will be valid (Max value = 4320) / 3 days",
            "type": "number",
            "maximum": 4320
          },
          "scheduleTime": {
            "description": "Date the message was sent. Maximum in 14 days. UnixTimeStamp in UTC timezone.",
            "type": "number"
          },
          "type": {
            "description": "Type of SMS ( 0 - regular SMS, 1 - Flash SMS )",
            "type": "number",
            "default": 0
          },
          "shortLink": {
            "description": "The URL shortener and tracker. Setting this property to ‘true’ will make the urls shorter and also urls will be tracked.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "webhookUrl": {
            "description": "The URL for DLR (Delivery Report). DLR is a feature that reports if the message has been delivered. If you want more information check section DLR in this documentation.",
            "type": "string"
          },
          "externalId": {
            "description": "The unique identifier of the message. After sending a text message with external ID, it cannot be resent for next 24 hours.",
            "type": "string",
            "example": "xxxx-xxxx-xxxx"
          }
        },
        "type": "object"
      },
      "TriggerScenarioBody": {
        "oneOf": [
          {
            "required": [
              "scenarioId"
            ],
            "properties": {
              "scenarioId": {
                "description": "Id of scenario that we should trigger",
                "type": "string",
                "example": "XXXXXX-XXXXX-XXXXX-XXXXX"
              },
              "recipientEmail": {
                "description": "Valid email address",
                "type": "string",
                "example": "test@test.pl"
              },
              "recipientMobileNumber": {
                "description": "Valid mobile number",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "required": [
              "scenarioId"
            ],
            "properties": {
              "scenarioId": {
                "description": "Id of scenario that we should trigger",
                "type": "string",
                "example": "XXXXXX-XXXXX-XXXXX-XXXXX"
              },
              "contactId": {
                "description": "External Id of a contact",
                "type": "string",
                "example": "XXXXX-XXXXX-XXXX-XXXX"
              }
            },
            "type": "object"
          }
        ]
      },
      "EmailCampaignInputObject": {
        "required": [
          "name",
          "htmlFromWebSiteUrl",
          "htmlContent",
          "subject",
          "fromName",
          "fromAddress",
          "groupId",
          "testAddresses"
        ],
        "properties": {
          "campaignId": {
            "description": "The unique ID of the campaign.",
            "type": "string",
            "maxLength": 64,
            "pattern": "/^[a-zA-Z-_]+$/",
            "example": "first-campaign-id"
          },
          "name": {
            "description": "The name of the campaign.",
            "type": "string",
            "maxLength": 150,
            "example": "firstCampaign"
          },
          "description": {
            "description": "The description of the campaign.",
            "type": "string",
            "maxLength": 500,
            "example": "My first campaign"
          },
          "subject": {
            "description": "The subject of the message in the campaign.",
            "type": "string",
            "maxLength": 500,
            "example": "Hello world"
          },
          "fromName": {
            "description": "The name of the sender.",
            "type": "string",
            "maxLength": 150,
            "example": "John Doe"
          },
          "fromAddress": {
            "description": "The email address of the sender.",
            "type": "string",
            "maxLength": 500,
            "example": "john.doe@example.pl"
          },
          "replyTo": {
            "description": "The email address to reply to.",
            "type": "string",
            "maxLength": 500,
            "example": "john.doe@example.pl"
          },
          "htmlFromWebSiteUrl": {
            "description": "The URL of the website.",
            "type": "string"
          },
          "htmlContent": {
            "description": "The html of the message.",
            "type": "string",
            "example": "<h1> hello there</h1>"
          },
          "textContent": {
            "description": "The text of the message.",
            "type": "string",
            "example": "hello there!"
          },
          "groupId": {
            "description": "The externalId of the group the message will be sent to. This ID can be found using List group method.",
            "type": "string",
            "example": "test-group-id"
          },
          "trackLinks": {
            "description": "The URL shortener and tracker. Setting this property to ‘true’ will make the urls shorter and also urls will be tracked.",
            "type": "boolean",
            "example": true
          },
          "googleAnalytics": {
            "description": "The optional campaign tracking parameter provided by Google Analytics.",
            "type": "boolean",
            "example": true
          },
          "scheduleTime": {
            "description": "The date the message will be set off. Be aware that if the campaign is going to be sent to many of recipients (thousands and more) the schedule date means then preparing all contacts firstly and then sending. For example, there is a campaign scheduled for 2020-01-01 10:00:00 so at 10 o'clock our system will start to collect all contacts from chosen group which can take sometimes more than an hour and then the messages will be sent to recipients. ",
            "type": "string",
            "pattern": "/^\\d{4}-\\d{2}-\\d{2}\\s*(?:\\d{2}:\\d{2}(?::\\d{2})?)?$/",
            "example": "2020-09-10 10:15:00"
          },
          "state": {
            "description": "If set to 'editable' allows to prevent sending email campaign immediately after creation",
            "type": "string",
            "default": "editable",
            "enum": [
              "editable",
              "sendable"
            ],
            "example": "editable"
          },
          "testAddresses": {
            "description": "The email addresses to send the campaign to see if the message is ok.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "john.doe@example.pl"
            },
            "minItems": 1
          },
          "confirmationAddresses": {
            "description": "The email addresses to send info about campaign end.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "john.doe@example.pl"
            },
            "minItems": 1
          }
        },
        "type": "object"
      },
      "HlrObject": {
        "properties": {
          "phone": {
            "description": "Phone numer which is checking",
            "type": "string"
          },
          "status": {
            "description": "Current SMS status: OK - action completed successfully, ERR - something went wrong ",
            "type": "string"
          },
          "imsi": {
            "description": "A unique number assigned to each SIM card in the GSM or UMTS network. In some cases it may only contain the country number and the network number .",
            "type": "int"
          },
          "network": {
            "description": "Alphanumeric name of the network from which the number comes.",
            "type": "string"
          },
          "ported": {
            "description": "Recipient number",
            "type": "string"
          },
          "networkPorted": {
            "description": "Alphanumeric name of the network to which the number is currently assigned.",
            "type": "string"
          },
          "description": {
            "description": "Possible error code while checking the number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailCheckerAliases": {},
      "MailCheckerHashObject": {},
      "PushCampaign": {
        "properties": {
          "name": {
            "description": "Push campaign name.",
            "type": "string"
          },
          "description": {
            "description": "Push campaign description.",
            "type": "string"
          },
          "externalId": {
            "description": "Push campaign name external id.",
            "type": "string"
          },
          "scheduleTime": {
            "description": "Push campaign schedule time.",
            "type": "string"
          },
          "number": {
            "description": "Amount of campaign recipients.",
            "type": "integer"
          },
          "groupId": {
            "description": "Recipients group id.",
            "type": "string"
          },
          "title": {
            "description": "Push campaign title.",
            "type": "string"
          },
          "body": {
            "description": "Push campaign body.",
            "type": "string"
          },
          "image": {
            "description": "Push campaign image.",
            "type": "string"
          },
          "silent": {
            "description": "Should notification be silent or not.",
            "type": "boolean"
          },
          "sound": {
            "description": "The push sound.",
            "type": "string"
          },
          "ttl": {
            "description": "The unix timestamp parameter specifying the maximum lifetime of notification.",
            "type": "integer"
          },
          "iosSubtitle": {
            "description": "Phone numer which is checking",
            "type": "string"
          },
          "androidLockscreenVisibility": {
            "description": "The parameter for visibility options. Available values:\n    PUBLIC,\n    PRIVATE,\n    SECRET",
            "type": "string"
          },
          "androidLargeIcon": {
            "description": "The parameter for push notification icon’s size. Use the icon path here.",
            "type": "string",
            "example": "/relative-icon-file-path"
          },
          "androidSmallIcon": {
            "description": "The parameter for push notification icon’s size. Use the icon path here.",
            "type": "string",
            "example": "/relative-icon-file-path"
          },
          "apps": {
            "description": "Pola które zostaną dodane o odpowiedzi",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalData": {
            "description": "External data.",
            "type": "object",
            "example": {
              "key1": "value1",
              "kay2": "value2"
            },
            "additionalProperties": true
          },
          "actions": {
            "description": "Pola które zostaną dodane o odpowiedzi",
            "type": "array",
            "items": {
              "properties": {
                "mainAction": {
                  "description": "Is main action",
                  "type": "boolean",
                  "example": "true"
                },
                "type": {
                  "description": "Action type",
                  "type": "string",
                  "example": "BROWSER"
                },
                "url": {
                  "description": "",
                  "type": "string",
                  "example": "www.emaillab.io"
                },
                "actionId": {
                  "description": "",
                  "type": "string",
                  "example": "123456"
                },
                "text": {
                  "description": "",
                  "type": "string",
                  "example": "Text"
                },
                "icon": {
                  "description": "",
                  "type": "string",
                  "example": "\\/ikona\\/pl"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "PushCampaignRecipients": {
        "properties": {
          "device": {
            "description": "Device id.",
            "type": "string"
          },
          "externalId": {
            "description": "Contact external_id",
            "type": "string"
          },
          "receivedTime": {
            "description": "Push recived time.",
            "type": "string"
          },
          "appId": {
            "description": "Application id.",
            "type": "string"
          },
          "type": {
            "description": "Push type. Example: IOS, ANDROID",
            "type": "integer"
          },
          "resultCode": {
            "description": "Result code.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PushInput": {
        "required": [
          "applications",
          "title",
          "body",
          "defaultLanguage",
          "to"
        ],
        "properties": {
          "applications": {
            "description": "The id of applications to which we want to send push notification.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
            },
            "minItems": 1
          },
          "to": {
            "description": "Push notification receivers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PushToObject"
            },
            "maxItems": 100,
            "minItems": 1
          },
          "title": {
            "description": "The push title that can be translated into multiple languages. Property name can have 2 characters maximum and property value maximum of 50 characters.",
            "type": "object",
            "example": {
              "pl": "test",
              "en": "test"
            },
            "additionalProperties": true
          },
          "body": {
            "description": "The push body that can be translated into multiple languages. Property name can have 2 characters maximum and property value maximum of 400  characters.",
            "type": "object",
            "example": {
              "pl": "test",
              "en": "test"
            },
            "additionalProperties": true
          },
          "defaultLanguage": {
            "description": "The default language for translating push in Unicode language identifier representation.",
            "type": "string",
            "example": "pl"
          },
          "image": {
            "description": "The absolute URL of image. Image requirements:\n\n    Android:\n\n    aspect ratio 2/1\n    format JPG PNG GIF\n    dimensions:\n    min 512x256\n    balanced 1044x720\n    max 2088x1440\n\n    iOS\n\n    size < 10MB\n    format JPG PNG GIF\n    dimensions max 2436x2436\n\n    ",
            "type": "string",
            "maxLength": 250,
            "example": "http://absolute.url/to/image"
          },
          "silent": {
            "description": "Should notification be silent or not.",
            "type": "boolean",
            "default": false
          },
          "sound": {
            "description": "The push sound. Use resource name or ‘DEAFULT’ string",
            "type": "string",
            "maxLength": 250,
            "example": "sound-file.wav"
          },
          "scheduleTime": {
            "description": "The date the Push will be set off.",
            "type": "string",
            "pattern": "/^\\d{4}-\\d{2}-\\d{2}\\s*(?:\\d{2}:\\d{2}(?::\\d{2})?)?$/",
            "example": "2020-01-01 12:12:12"
          },
          "ttl": {
            "description": "The unix timestamp parameter specifying the maximum lifetime of notification. Must be in future. The push service will try to deliver the notification to the receiver until the specified day.",
            "type": "number",
            "minimum": 0,
            "example": 1540377351
          },
          "externalData": {
            "description": "The additional key/value pair you can add to the push notification. Property name can contain max of 50 signs",
            "type": "object",
            "example": {
              "test": "x",
              "test1": false
            },
            "additionalProperties": true
          },
          "advanced": {
            "description": "The advanced options for push notification.",
            "properties": {
              "subtitle": {
                "description": "The push notification subtitle.",
                "type": "string",
                "maxLength": 255,
                "example": "subtitle-only-ios"
              },
              "lockscreenVisibility": {
                "description": "The parameter for visibility options. Available values:\n\n    1 - PUBLIC,\n    2 - PRIVATE,\n    3 - SECRET\n\n    ",
                "type": "number",
                "enum": [
                  1,
                  2,
                  3
                ],
                "example": 1
              },
              "icon": {
                "description": "The push notification icon",
                "properties": {
                  "small": {
                    "description": "The parameter for push notification icon’s size. Use the icon path here.",
                    "type": "string",
                    "example": "/relative-icon-file-path"
                  },
                  "large": {
                    "description": "The parameter for push notification icon’s size. Use the icon path here.",
                    "type": "string",
                    "example": "/relative-icon-file-path"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "action": {
            "description": "Action that should be executed after push click",
            "properties": {
              "url": {
                "description": "The URL to take the user to after button click.",
                "type": "string",
                "example": "http://absolute.url/to/redirect/on/click"
              },
              "type": {
                "description": "The type of the action:\n\n    1 - NONE\n    2 - BROWSER\n    3 - WEBVIEW\n    4 - DEEPLINK\n\n    ",
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4
                ],
                "example": 2
              }
            },
            "type": "object"
          },
          "actionButtons": {
            "description": "Two buttons for push notification. Each button can have different action.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/actionButton"
            },
            "maxItems": 2
          }
        },
        "type": "object"
      },
      "PushToObject": {
        "required": [
          "receiver",
          "type"
        ],
        "properties": {
          "receiver": {
            "description": "The id, email or phone number of the receiver.",
            "type": "string",
            "example": "example-device-id"
          },
          "externalId": {
            "description": "Custom id. Globally unique!",
            "type": "string",
            "example": "xxx-xxx-xxx-xxx"
          },
          "type": {
            "description": "Type of receiver value. Enum values:\n\n    1 - DEVICE_RECEIVER,\n    2 - EMAIL_RECEIVER,\n    3 - NUMBER_RECEIVER\n\n    ",
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ],
            "example": 1
          }
        },
        "type": "object"
      },
      "actionButton": {
        "description": "Buttons for push notification",
        "properties": {
          "button": {
            "description": "One of available buttons:\n\n    1 - YES\n    2 - NO\n    3 - ACCEPT\n    4 - DECLINE\n    5 - BUY_NOW\n    6 - LATER\n    7 - ADD_TO_CART\n    8 - NO_THANKS\n    9 - OPEN\n    10 - CLOSE\n    11 - LOGIN\n    12 - SHARE\n    13 - SEE_MORE\n\n    ",
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13
            ],
            "example": 1
          },
          "icon": {
            "description": "Only for android!",
            "type": "string",
            "example": "my_icon.png"
          },
          "action": {
            "properties": {
              "url": {
                "description": "The URL to take the user to after button click.",
                "type": "string",
                "example": "www.google.pl"
              },
              "type": {
                "description": "The type of the action:\n\n    1 - NONE\n    2 - BROWSER\n    3 - WEBVIEW\n    4 - DEEPLIN\n\n    ",
                "type": "number",
                "enum": [
                  1,
                  2,
                  3,
                  4
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PushObject": {},
      "SmsDLRObjectV2": {
        "properties": {
          "externalId": {
            "description": "Unique own message identifier",
            "type": "string",
            "example": "121212121-12121212-121212-2121212"
          },
          "status": {
            "description": "Current SMS status ( 0 - new, 1 - delivered, 2- not delivered )",
            "type": "number",
            "example": 1
          },
          "statusDesc": {
            "description": "Status description.",
            "type": "string",
            "example": "DELIVERED"
          },
          "statusTime": {
            "description": "Current SMS status date",
            "type": "number",
            "example": 1643723643
          },
          "webhookUrl": {
            "description": "The URL for DLR (Delivery Report).  DLR is a feature that reports if the message has been delivered. If you want more inforations check section DLR in this documentation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SmsDlr": {
        "properties": {
          "id": {
            "description": "Pola które zostaną dodane o odpowiedzi",
            "type": "string"
          },
          "sendId": {
            "description": "Pola które zostaną dodane o odpowiedzi",
            "type": "string"
          },
          "report": {
            "description": "Pola które zostaną dodane o odpowiedzi",
            "type": "string"
          },
          "reportTime": {
            "description": "Pola które zostaną dodane o odpowiedzi",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SmsObject": {
        "properties": {
          "id": {
            "description": "Unique SMS id",
            "type": "number"
          },
          "sender": {
            "description": "SMS sender's number",
            "type": "string"
          },
          "message": {
            "description": "The content of the SMS",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Recipient number",
            "type": "string"
          },
          "scheduleTime": {
            "description": "Date the message was sent. Maximum in 14 days. UnixTimeStamp in UTC timezone.",
            "type": "number"
          },
          "type": {
            "description": "Type of SMS ( 0 - regular SMS, 1 - Flash SMS )",
            "type": "number"
          },
          "shortLink": {
            "description": "Make short links in the SMS",
            "type": "boolean"
          },
          "externalId": {
            "description": "Unique own message identifier",
            "type": "string"
          },
          "status": {
            "description": "Current SMS status 1 - new, 2 - move to send, 9 - rejected, 21 - sent ",
            "type": "number"
          },
          "statusTime": {
            "description": "Current SMS status date",
            "type": "number"
          },
          "subscribeUrl": {
            "description": "Url where you can find current SMS status",
            "type": "string"
          },
          "createTime": {
            "description": "Date of first SMS status",
            "type": "number"
          },
          "smsPrice": {
            "description": "Price of SMS",
            "type": "number"
          },
          "currency": {
            "description": "Currency( 0 - PLN, 1 - USD, 2 - EUR)",
            "type": "number"
          },
          "numberOfParts": {
            "description": "Number of SMSes sent in one message.",
            "type": "number"
          },
          "encoding": {
            "description": "Type of character encoding in SMS(0 - GSM7, 1 - UTF8)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SmsObjectSummary": {
        "properties": {
          "id": {
            "description": "Unique SMS id",
            "type": "number"
          },
          "sender": {
            "description": "SMS sender's number",
            "type": "string"
          },
          "message": {
            "description": "The content of the SMS",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Recipient number",
            "type": "string"
          },
          "scheduleTime": {
            "description": "Date the message was sent. Maximum in 14 days. UnixTimeStamp in UTC timezone.",
            "type": "number"
          },
          "type": {
            "description": "Type of SMS ( 0 - regular SMS, 1 - Flash SMS )",
            "type": "number"
          },
          "shortLink": {
            "description": "Make short links in the SMS",
            "type": "boolean"
          },
          "externalId": {
            "description": "Unique own message identifier",
            "type": "string"
          },
          "status": {
            "description": "Current SMS status 1 - new, 2 - move to send, 9 - rejected, 21 - sent ",
            "type": "number"
          },
          "statusTime": {
            "description": "Current SMS status date",
            "type": "number"
          },
          "subscribeUrl": {
            "description": "Url where you can find current SMS status",
            "type": "string"
          },
          "createTime": {
            "description": "Date of first SMS status",
            "type": "number"
          },
          "smsPrice": {
            "description": "Price of SMS",
            "type": "number"
          },
          "currency": {
            "description": "Currency( 0 - PLN, 1 - USD, 2 - EUR)",
            "type": "number"
          },
          "numberOfParts": {
            "description": "Number of SMSes sent in one message.",
            "type": "number"
          },
          "encoding": {
            "description": "Type of character encoding in SMS(0 - GSM7, 1 - UTF8)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SmsObjectSummaryV2": {
        "properties": {
          "sender": {
            "description": "SMS sender's number",
            "type": "string"
          },
          "message": {
            "description": "The content of the SMS",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Recipient number",
            "type": "string"
          },
          "scheduleTime": {
            "description": "Date the message was sent. Maximum in 14 days. UnixTimeStamp in UTC timezone.",
            "type": "number"
          },
          "type": {
            "description": "Type of SMS ( 0 - regular SMS, 1 - Flash SMS )",
            "type": "number"
          },
          "shortLink": {
            "description": "Make short links in the SMS",
            "type": "boolean"
          },
          "externalId": {
            "description": "Unique own message identifier",
            "type": "string"
          },
          "status": {
            "description": "Current SMS status 1 - new, 2 - move to send, 9 - rejected, 21 - sent ",
            "type": "number"
          },
          "statusTime": {
            "description": "Current SMS status date",
            "type": "number"
          },
          "createTime": {
            "description": "Date of first SMS status",
            "type": "number"
          },
          "smsPrice": {
            "description": "Price of SMS",
            "type": "number"
          },
          "currency": {
            "description": "Currency( 0 - PLN, 1 - USD, 2 - EUR)",
            "type": "number"
          },
          "numberOfParts": {
            "description": "Number of SMSes sent in one message.",
            "type": "number"
          },
          "encoding": {
            "description": "Type of character encoding in SMS(0 - GSM7, 1 - UTF8)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SmsObjectV2": {
        "properties": {
          "sender": {
            "description": "SMS sender's number",
            "type": "string"
          },
          "message": {
            "description": "The content of the SMS",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Recipient number",
            "type": "string"
          },
          "scheduleTime": {
            "description": "Date the message was sent. Maximum in 14 days. UnixTimeStamp in UTC timezone.",
            "type": "number"
          },
          "type": {
            "description": "Type of SMS ( 0 - regular SMS, 1 - Flash SMS )",
            "type": "number"
          },
          "shortLink": {
            "description": "Make short links in the SMS",
            "type": "boolean"
          },
          "externalId": {
            "description": "Unique own message identifier",
            "type": "string"
          },
          "status": {
            "description": "Current SMS status 1 - new, 2 - move to send, 9 - rejected, 21 - sent ",
            "type": "number"
          },
          "statusTime": {
            "description": "Current SMS status date",
            "type": "number"
          },
          "createTime": {
            "description": "Date of first SMS status",
            "type": "number"
          },
          "smsPrice": {
            "description": "Price of SMS",
            "type": "number"
          },
          "currency": {
            "description": "Currency( 0 - PLN, 1 - USD, 2 - EUR)",
            "type": "number"
          },
          "numberOfParts": {
            "description": "Number of SMSes sent in one message.",
            "type": "number"
          },
          "encoding": {
            "description": "Type of character encoding in SMS(0 - GSM7, 1 - UTF8)",
            "type": "number"
          }
        },
        "type": "object"
      },
      "UpsertContactObject": {
        "properties": {
          "extId": {
            "description": "Contact external id.",
            "type": "string"
          },
          "pushId": {
            "description": "Push id.",
            "type": "string"
          },
          "number": {
            "description": "Contact number.",
            "type": "string"
          },
          "firstName": {
            "description": "Contact first name.",
            "type": "string"
          },
          "lastName": {
            "description": "Contact last name.",
            "type": "string"
          },
          "companyName": {
            "description": "Contact company name.",
            "type": "string"
          },
          "email": {
            "description": "Contact email.",
            "type": "string"
          },
          "unsubscribeToken": {
            "description": "Should token be unsubscribed",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "202": {
        "description": "Client should wait number of second from Retry-After header before next request",
        "headers": {
          "Retry-After": {
            "schema": {
              "description": "Indicates how long the user agent should wait before making a follow-up request",
              "type": "integer"
            }
          },
          "Expires": {
            "schema": {
              "description": "Contains the date after which the response is considered stale.",
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MetaObject"
            }
          }
        }
      },
      "207": {
        "description": "Some of request body items were not processed due to validation errors",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DataObject"
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaObject"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "401": {
        "description": "Authorization data is invalid",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "meta": {
                  "$ref": "#/components/schemas/MetaObject"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorObject"
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "404": {
        "description": "Request was successfully processed but no results were returned",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MetaObject"
            }
          }
        }
      },
      "500": {
        "description": "Request was not processed due to server error",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "meta": {
                  "$ref": "#/components/schemas/MetaObject"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "onlyMeta200": {
        "description": "Request was successfully processed",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "meta": {
                  "$ref": "#/components/schemas/MetaObject"
                }
              },
              "type": "object"
            }
          }
        }
      }
    },
    "parameters": {
      "smtpAccount": {
        "name": "smtpAccount",
        "in": "query",
        "description": "The smtp account name.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "1.test.smtp"
      },
      "messageId": {
        "name": "messageId",
        "in": "query",
        "description": "The unique ID of the message.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "test0001@domena.pl"
      },
      "to": {
        "name": "to",
        "in": "query",
        "description": "The email address the email was sent to.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "test@email.pl"
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of items returned by request. Default ‘100’. Maximum ‘1000’.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "maximum": 1000
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "The number of items omitted from the beginning of the list. Default ‘0’.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": "0"
        }
      },
      "group": {
        "name": "group",
        "in": "query",
        "description": "Get contacts from specified group id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "phoneNumber": {
        "name": "phoneNumber",
        "in": "query",
        "description": "Search for contact using phone number",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "email": {
        "name": "email",
        "in": "query",
        "description": "Search for contact using email address",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "name": "id",
        "in": "query",
        "description": "Search for contact using contact id",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "externalId": {
        "name": "externalId",
        "in": "query",
        "description": "The unique ID of the object you are looking for.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "dateTo": {
        "name": "dateTo",
        "in": "query",
        "description": "End of the time range.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "YYYY-MM-DD hh:mm:ii"
        }
      },
      "dateFrom": {
        "name": "dateFrom",
        "in": "query",
        "description": "Start of the time range.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "YYYY-MM-DD hh:mm:ii"
        }
      },
      "campaignId": {
        "name": "campaignId",
        "in": "path",
        "description": "Id of existing campaign",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "campaignIdInQueryString": {
        "name": "campaignIdInQueryString",
        "in": "query",
        "description": "Id of existing campaign",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "inArchive": {
        "name": "inArchive",
        "in": "query",
        "description": "Search for archived contacts",
        "required": false,
        "schema": {
          "type": "bool"
        }
      },
      "archiveDateTo": {
        "name": "archiveDateTo",
        "in": "query",
        "description": "Date in Y-m-d H:i:s format to search archived contacts",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "archiveDateFrom": {
        "name": "archiveDateFrom",
        "in": "query",
        "description": "Date in Y-m-d H:i:s format to search archived contacts",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "APPKeyHeader": {
        "type": "apiKey",
        "name": "Application-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "APIKeyHeader": []
    }
  ],
  "tags": [
    {
      "name": "Groups",
      "description": "This API mainly allows you to add, update, delete and list contacts but also you can unsubscribe and resubscribe contact or list segments."
    },
    {
      "name": "Contacts",
      "description": "Contacts methods allows you to manage contacts that are identified by an unique externalId. Using externalId you can add, update, delete contacts, create groups and more."
    },
    {
      "name": "Emails",
      "description": "Email API mainly allows you to send emails to all over the world. You can also create or delete email templates, get clicks, opens and statuses on your emails and more.\n     *\n     *               There are two ways to send emails using our API:\n     *               - transactional email API that allows you to send emails to a single or an array of email addresses\n     *               - email campaigns that allows you to send emails to created group through API or account panel"
    },
    {
      "name": "Sms",
      "description": "Transactional SMS API allows you to send SMS to a single or an array of phone numbers."
    },
    {
      "name": "Blacklist",
      "description": "Blacklist API basically allows you to manage email addresses and domains. You can add, update, delete or list receivers addresses or domains on your blacklist. Please be aware that this API can be used only in reference to transactional emails. "
    },
    {
      "name": "Campaigns",
      "description": "Email campaigns API allows you to send emails / smses to a specific group created through Create group method or through the panel."
    },
    {
      "name": "Pushes",
      "description": "Push API allows you to send push notifications with images and buttons."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Transactional Email API",
      "tags": [
        "Emails",
        "Blacklist"
      ]
    },
    {
      "name": "Campaigns Management",
      "tags": [
        "Campaigns",
        "Automation"
      ]
    },
    {
      "name": "Transactional SMS API",
      "tags": [
        "Sms"
      ]
    },
    {
      "name": "Contacts Management",
      "tags": [
        "Contacts",
        "Groups"
      ]
    },
    {
      "name": "Transactional Push API",
      "tags": [
        "Pushes"
      ]
    }
  ]
}
